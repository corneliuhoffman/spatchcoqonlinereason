// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Index = require("./technical/index.js");
var Utils = require("./technical/utils.js");
var React = require("react");
var Picker = require("reason-react-primitives/lib/js/src/picker.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Coqmanager = require("./technical/coqmanager.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

function renderOption(option, value) {
  var tmp;
  if (value) {
    var match = +(value[0] === option);
    tmp = match !== 0 ? "red" : "";
  } else {
    tmp = "";
  }
  var tmp$1;
  if (value) {
    var match$1 = +(value[0] === option);
    tmp$1 = match$1 !== 0 ? "#fff" : "";
  } else {
    tmp$1 = "";
  }
  return React.createElement("div", {
              style: {
                background: "lightgreen",
                backgroundColor: tmp,
                borderBottom: "1px solid rgba(0, 0, 0, 0.1)",
                color: tmp$1,
                padding: "0px",
                width: "100%"
              }
            }, option);
}

var component = ReasonReact.statelessComponent("GoalPicker");

function handleClick(_, _$1) {
  return /* () */0;
}

function make(name, color, goal, _) {
  var newrecord = component.slice();
  newrecord[/* didUpdate */5] = (function () {
      return (MathJax.Hub.Queue(["Typeset",MathJax.Hub,root]));
    });
  newrecord[/* render */9] = (function () {
      var tacts;
      try {
        tacts = Coqmanager.maketab(name, goal);
      }
      catch (exn){
        tacts = /* [] */0;
      }
      var nname = name.replace("\n", " ");
      var z;
      if (goal) {
        try {
          Index.mylatex(nname);
        }
        catch (exn$1){
          
        }
        z = "$" + (Index.mylatex(nname) + "$");
      } else {
        var li = nname.split(":");
        if (li.length > 1) {
          var h = Caml_array.caml_array_get(li, 0);
          var tl1 = $$String.concat(":", $$Array.to_list($$Array.sub(li, 1, li.length - 1 | 0)));
          var tl;
          try {
            tl = Index.mylatex(tl1);
          }
          catch (exn$2){
            tl = tl1;
          }
          z = "\$ \\mathbf{" + (String(h) + (" :\\ } " + (String(tl) + " \$ ")));
        } else {
          z = Caml_array.caml_array_get(li, 0);
        }
      }
      return ReasonReact.element(/* None */0, /* None */0, Picker.make(tacts, (function (value) {
                        if (value) {
                          return React.createElement("div", {
                                      style: {
                                        background: color,
                                        borderBottom: "1px solid black",
                                        fontSize: "14px",
                                        padding: "5px",
                                        width: "100%"
                                      }
                                    }, value[0]);
                        } else {
                          return "Select a value â€¦";
                        }
                      }), renderOption, /* Some */["" + (String(z) + "")], (function (a) {
                        if (a) {
                          editor2.setValue(a[0] + ("\n" + Utils.getText(/* () */0)));
                          return /* () */0;
                        } else {
                          return /* () */0;
                        }
                      }), /* Some */["0px"], /* Some */[/* false */0], /* array */[]));
    });
  return newrecord;
}

exports.renderOption = renderOption;
exports.component = component;
exports.handleClick = handleClick;
exports.make = make;
/* component Not a pure module */
