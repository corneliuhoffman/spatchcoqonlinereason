// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Ast = require("./ast.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Sexpm = require("./sexpm.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Formulaparsing = require("./formulaparsing.js");

function myprint(x) {
  try {
    return Formulaparsing.print(Formulaparsing.parse(x));
  }
  catch (exn){
    return x;
  }
}

function myast(x) {
  try {
    return Ast.to_string(Formulaparsing.parse(x));
  }
  catch (exn){
    return x;
  }
}

function mylatex(x) {
  try {
    return Formulaparsing.latex(Formulaparsing.parse(x));
  }
  catch (exn){
    return x;
  }
}

function makeopt(str) {
  return /* Some */[str];
}

function readopt(a) {
  if (a) {
    return a[0];
  } else {
    return "";
  }
}

function match2_num(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 < len2) {
    return /* tuple */[
            /* false */0,
            0
          ];
  } else {
    var _i = len1 - len2 | 0;
    var _n = 0;
    while(true) {
      var n = _n;
      var i = _i;
      if (i < 0) {
        return /* tuple */[
                +(n !== 0),
                n
              ];
      } else {
        var sub = $$String.sub(s1, i, len2);
        if (sub === s2) {
          _n = n + 1 | 0;
          _i = i - 1 | 0;
          continue ;
          
        } else {
          _i = i - 1 | 0;
          continue ;
          
        }
      }
    };
  }
}

function match1(s1, s2) {
  var st = "/" + (s2 + "/g");
  var re = new RegExp(st);
  return +(s1.search(re) >= 0);
}

function printalllist(x) {
  if (x[0] >= 848054398) {
    return $$String.concat(" ", List.map(printalllist, x[1]));
  } else {
    return x[1];
  }
}

function mypars(l, m) {
  if (m[0] >= 848054398) {
    var li = m[1];
    if (Caml_obj.caml_equal(List.hd(li), /* `Atom */[
            726615281,
            "CoqString"
          ])) {
      var tail = List.tl(li);
      var str = printalllist(/* `List */[
            848054398,
            tail
          ]);
      return /* :: */[
              str,
              l
            ];
    } else {
      return List.fold_left(mypars, l, li);
    }
  } else {
    return l;
  }
}

function coqlist(l, m) {
  if (m[0] >= 848054398) {
    var li = m[1];
    console.log(List.hd(li));
    if (Caml_obj.caml_equal(List.hd(li), /* `Atom */[
            726615281,
            "Pp_string"
          ])) {
      var tail = List.tl(li);
      var str = printalllist(/* `List */[
            848054398,
            tail
          ]);
      console.log(str);
      return /* :: */[
              str,
              l
            ];
    } else {
      return List.fold_left(coqlist, l, li);
    }
  } else if (m[1] === "Pp_force_newline") {
    return /* :: */[
            "\n",
            l
          ];
  } else {
    return l;
  }
}

function ncoqstr(l, m) {
  if (m[0] >= 848054398) {
    var s = m[1];
    if (s) {
      var match = s[0];
      if (typeof match === "number" || match[0] !== 726615281) {
        return List.fold_left(ncoqstr, l, s);
      } else {
        var match$1 = s[1];
        if (match$1) {
          var match$2 = match$1[0];
          if (typeof match$2 === "number" || match$2[0] !== 848054398) {
            return List.fold_left(ncoqstr, l, s);
          } else {
            var match$3 = match$1[1];
            if (match$3) {
              var match$4 = match$3[0];
              if (typeof match$4 === "number" || match$4[0] !== 848054398 || match$3[1]) {
                return List.fold_left(ncoqstr, l, s);
              } else if (match[1] === "Pp_box") {
                return /* :: */[
                        /* `List */[
                          848054398,
                          match$4[1]
                        ],
                        l
                      ];
              } else {
                return l;
              }
            } else {
              return List.fold_left(ncoqstr, l, s);
            }
          }
        } else {
          return List.fold_left(ncoqstr, l, s);
        }
      }
    } else {
      return List.fold_left(ncoqstr, l, s);
    }
  } else {
    return l;
  }
}

function coqstr(l, m) {
  if (m[0] >= 848054398) {
    var s = m[1];
    if (s) {
      var match = s[0];
      if (typeof match === "number" || match[0] !== 726615281) {
        return List.fold_left(coqstr, l, s);
      } else {
        var match$1 = s[1];
        if (match$1) {
          var match$2 = match$1[0];
          if (typeof match$2 === "number" || match$2[0] !== 726615281 || match$1[1]) {
            return List.fold_left(coqstr, l, s);
          } else if (match[1] === "Pp_string") {
            return /* :: */[
                    match$2[1],
                    l
                  ];
          } else {
            return l;
          }
        } else {
          return List.fold_left(coqstr, l, s);
        }
      }
    } else {
      return List.fold_left(coqstr, l, s);
    }
  } else if (m[1] === "Pp_force_newline") {
    return /* :: */[
            "\n",
            l
          ];
  } else {
    return l;
  }
}

function print_err(l, s) {
  if (s[0] >= 848054398) {
    var r = s[1];
    if (r) {
      if (List.mem(Sexpm.to_string(List.hd(r)), /* :: */[
              "ExplainErr.EvaluatedError",
              /* :: */[
                "Pretype_errors.PretypeError",
                /* :: */[
                  "CErrors.AlreadyDeclared",
                  /* :: */[
                    "CErrors.UserError",
                    /* :: */[
                      "NoSuchState",
                      /* :: */[
                        "Stream.Error",
                        /* :: */[
                          "rror",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ])) {
        return /* :: */[
                printalllist(s),
                l
              ];
      } else {
        return List.fold_left(print_err, l, r);
      }
    } else {
      return l;
    }
  } else {
    return l;
  }
}

function getallgoals(ss) {
  return List.map((function (x) {
                return $$String.concat("", List.rev(coqstr(/* [] */0, x))).split("\n");
              }), List.rev(ncoqstr(/* [] */0, ss)));
}

function pstr(xx) {
  var x1 = xx.replace(new RegExp("\"", "g"), " \" ");
  var x = x1.replace(new RegExp("\xe2\x86\x92", "g"), "boo");
  var aa = Sexpm.parse_string(x);
  if (aa[0] >= 106380200) {
    return /* `Atom */[
            726615281,
            "Error" + aa[1]
          ];
  } else {
    return aa[1];
  }
}

function geterr(x) {
  return print_err(/* [] */0, pstr(x));
}

function getgoals(x) {
  var xx = "(" + (x + ")");
  var xxx = xx.replace("\"", " \" ");
  var c = pstr(xxx);
  return mypars(/* [] */0, c);
}

function processgoall(x) {
  var goals = getgoals(x);
  var goalslist = List.hd(goals).split("\n\n");
  return $$Array.map((function (x) {
                return x.split("\n============================\n");
              }), goalslist);
}

function listsofgoals(x) {
  var possibleGoals = Sexpm.parse_string(x);
  console.log(possibleGoals);
  if (possibleGoals[0] >= 106380200) {
    return /* `Atom */[
            726615281,
            "Error" + possibleGoals[1]
          ];
  } else {
    return possibleGoals[1];
  }
}

exports.myprint = myprint;
exports.myast = myast;
exports.mylatex = mylatex;
exports.makeopt = makeopt;
exports.readopt = readopt;
exports.match2_num = match2_num;
exports.match1 = match1;
exports.printalllist = printalllist;
exports.mypars = mypars;
exports.coqlist = coqlist;
exports.ncoqstr = ncoqstr;
exports.coqstr = coqstr;
exports.print_err = print_err;
exports.getallgoals = getallgoals;
exports.pstr = pstr;
exports.geterr = geterr;
exports.getgoals = getgoals;
exports.processgoall = processgoall;
exports.listsofgoals = listsofgoals;
/* Sexpm Not a pure module */
