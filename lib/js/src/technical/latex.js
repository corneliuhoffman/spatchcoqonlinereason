// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function separate_hyps(x) {
  var sep = x.split("<br>============================<br>");
  var conc = Caml_array.caml_array_get(sep, 1);
  var hy = Caml_array.caml_array_get(sep, 0).split("<br>");
  return {
          hyps: hy,
          conclusion: conc
        };
}

function gethead(tree) {
  return separate_hyps(tree.innerHTML);
}

function newconclusion(tree) {
  return List.map((function (a) {
                return separate_hyps(a.innerHTML).conclusion;
              }), tree.children);
}

function newhyp(tree) {
  var oldhyp = separate_hyps(tree.innerHTML).hyps;
  var list = List.map((function (x) {
          var nhyp = separate_hyps(x.innerHTML).hyps;
          return List.filter((function (a) {
                          return 1 - List.mem(a, $$Array.to_list(oldhyp));
                        }))($$Array.to_list(nhyp));
        }), tree.children);
  return List.map((function (x) {
                return $$String.concat("$, $", x);
              }), list);
}

function deadhyp(tree) {
  var oldhyp = separate_hyps(tree.innerHTML).hyps;
  var lll = List.map((function (x) {
          return separate_hyps(x.innerHTML).hyps;
        }), tree.children);
  var union = List.fold_left((function (a, b) {
          return Pervasives.$at(a, List.filter((function (x) {
                              return 1 - List.mem(x, a);
                            }))($$Array.to_list(b)));
        }), /* [] */0, lll);
  return $$String.concat("$ $", List.filter((function (a) {
                      return 1 - List.mem(a, union);
                    }))($$Array.to_list(oldhyp)));
}

function change(pattern, string, replist) {
  var reg = new RegExp("/" + (pattern + "\\{(.*?)\\}/g"));
  var list = string.match(reg);
  if (list !== null) {
    var li = List.tl($$Array.to_list(list));
    return List.fold_left((function (a, b) {
                  var ss = "/" + (pattern + ("\\{" + (b + "\\}/g")));
                  var mre = new RegExp(ss);
                  return a.replace(mre, List.nth(replist, Caml_format.caml_int_of_string(b) - 1 | 0));
                }), string, li);
  } else {
    return string;
  }
}

function subs_list(l, str) {
  return List.fold_left((function (a, b) {
                var r = new RegExp("/" + (Caml_array.caml_array_get(b, 0) + "/g"));
                return a.replace(r, Caml_array.caml_array_get(b, 1));
              }), str, l);
}

var changes = /* :: */[
  /* :: */[
    "\xe2\x88\xa8",
    /* :: */[
      "\\lor ",
      /* [] */0
    ]
  ],
  /* :: */[
    /* :: */[
      "\xe2\x86\x92",
      /* :: */[
        "\\Rightarrow ",
        /* [] */0
      ]
    ],
    /* :: */[
      /* :: */[
        "\xe2\x88\x80",
        /* :: */[
          "\\forall ",
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          "\xe2\x88\x83",
          /* :: */[
            "\\exists ",
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            "\xe2\x88\xa7",
            /* :: */[
              "\\land ",
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              "\xe2\x86\x94",
              /* :: */[
                "\\Leftrightarrow ",
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                " +",
                /* :: */[
                  " ",
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  "\xe2\x88\x88",
                  /* :: */[
                    "\\in ",
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "\xe2\x88\xa9",
                    /* :: */[
                      "\\cap ",
                      /* [] */0
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      "\xe2\x88\xaa",
                      /* :: */[
                        "\\cup ",
                        /* [] */0
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        "_",
                        /* :: */[
                          "-",
                          /* [] */0
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          "\xe2\x8a\x86",
                          /* :: */[
                            "\\subseteq ",
                            /* [] */0
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            "\xe2\x88\x85",
                            /* :: */[
                              "\\emptyset ",
                              /* [] */0
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              "\xe2\x88\x81",
                              /* :: */[
                                "\\complement ",
                                /* [] */0
                              ]
                            ],
                            /* :: */[
                              /* :: */[
                                "<b>",
                                /* :: */[
                                  "",
                                  /* [] */0
                                ]
                              ],
                              /* :: */[
                                /* :: */[
                                  "<br>",
                                  /* :: */[
                                    "",
                                    /* [] */0
                                  ]
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function latex(tree, commandstr) {
  var comp1 = List.map((function (x) {
          return Caml_array.caml_array_get(x, 1).replace(new RegExp("/'/g"), "");
        }), commandstr);
  var comp = List.map((function (x) {
          var re = new RegExp("/Notation(.*?):=/");
          var v0 = x.match(re);
          var v = v0 !== null ? Caml_array.caml_array_get(v0, 0) : "";
          var re1 = new RegExp("/constr\\(.?\\)|hyp\\(.?\\)|reference\\(.?\\)|ident\\(.?\\)/g");
          var v1 = $$String.trim(v.replace(re1, "let")) + ".";
          var re2 = new RegExp("/\\s\\s+/g");
          var v2 = v1.replace(re2, " ");
          var re3 = new RegExp("/VAR/g");
          var v3 = v2.replace(re3, "\\(.+?\\)");
          return new RegExp("/" + (v3 + "/g"));
        }), comp1);
  var string;
  if (tree.leavingtactic !== "") {
    var res0 = List.mapi((function (s, a) {
            var match_ = tree.leavingtactic.match(List.nth(comp, s));
            if (match_ !== null) {
              return /* :: */[
                      a,
                      /* :: */[
                        match_,
                        /* [] */0
                      ]
                    ];
            } else {
              return /* [] */0;
            }
          }), commandstr);
    var res = List.hd(List.filter((function (a) {
                  return +(a !== /* [] */0);
                }))(res0));
    string = change("@val", Caml_array.caml_array_get(List.hd(res), 0), $$Array.to_list(List.hd(List.tl(res))));
  } else {
    string = "{\\color{red} This still needs a proof\n\n}";
  }
  var string1 = change("@conc", string, /* :: */[
        separate_hyps(tree.innerHTML).conclusion,
        /* [] */0
      ]);
  var string2 = change("@newconclusion", string1, newconclusion(tree));
  var string3 = change("@newhyp", string2, newhyp(tree));
  var string4 = change("@deadhyp", string3, /* :: */[
        deadhyp(tree),
        /* [] */0
      ]);
  var string5 = change("@latex", string4, List.map((function (t) {
              return latex(t, commandstr);
            }), tree.children));
  return subs_list(List.map($$Array.of_list, changes), string5);
}

exports.separate_hyps = separate_hyps;
exports.gethead = gethead;
exports.newconclusion = newconclusion;
exports.newhyp = newhyp;
exports.deadhyp = deadhyp;
exports.change = change;
exports.subs_list = subs_list;
exports.changes = changes;
exports.latex = latex;
/* No side effect */
