// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Index = require("./index.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Formulaparsing = require("./formulaparsing.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function goalstuffToJs(param) {
  return {
          id: param[/* id */0],
          goals: param[/* goals */1],
          exitTactic: param[/* exitTactic */2]
        };
}

function goalstuffFromJs(param) {
  return /* record */[
          /* id */param.id,
          /* goals */param.goals,
          /* exitTactic */param.exitTactic
        ];
}

var coq = new Worker("./sertop_js.js");

var response = [""];

var listofids = [/* [] */0];

var CoqErr = Caml_exceptions.create("Coqmanager.CoqErr");

var completedRe = new RegExp("Completed", "g");

var canceledRe = new RegExp("Canceled", "g");

var processeddRe = new RegExp("Processed", "g");

var addedRe = new RegExp("Added (\\d*)", "g");

var errorRe = new RegExp("rror|CoqExp", "g");

var idRe = new RegExp("id (\\d*)", "g");

var interval = [null];

function clearint() {
  return Js_null_undefined.iter(interval[0], (function (intervalId) {
                clearInterval(intervalId);
                return /* () */0;
              }));
}

function msgBackHandler(e) {
  var d = e.data;
  console.log(d);
  response[0] = response[0] + ("\n" + d);
  return /* () */0;
}

coq.onmessage = msgBackHandler;

var com = " \"From Coq Require Import Prelude.\"";

var initial = "(Add ()  \"From Coq Require Import Prelude.\")";

function getmax(name, str, i) {
  var stre = name + " (\\d*)";
  var reg = new RegExp(stre, "g");
  var res = new RegExp(stre);
  var marr = str.match(reg);
  var numberlist = marr !== null ? $$Array.map((function (x) {
            var a = x.match(res);
            if (a !== null) {
              return Caml_array.caml_array_get(a, 1);
            } else {
              return "-1";
            }
          }), marr) : /* array */["-1"];
  $$Array.sort((function (a, b) {
          return Caml_format.caml_int_of_string(b) - Caml_format.caml_int_of_string(a) | 0;
        }), numberlist);
  return Caml_array.caml_array_get(numberlist, i);
}

function getmax1(list, i) {
  var numberlist = $$Array.map((function (a) {
          var reg = new RegExp("/Added (\\d*)/g");
          var poss = a.match(reg);
          if (poss !== null) {
            return Caml_array.caml_array_get(poss, 1);
          } else {
            return "-1";
          }
        }), list);
  $$Array.sort((function (a, b) {
          return Caml_format.caml_int_of_string(b) - Caml_format.caml_int_of_string(a) | 0;
        }), numberlist);
  return Caml_array.caml_array_get(numberlist, i);
}

function clean(x) {
  var s1 = $$String.trim(x);
  var s2 = s1.replace(new RegExp("/ +/g"), " ");
  return s2.replace(new RegExp("/ *\\./g"), "\\.");
}

function checktactic(_, _$1) {
  return /* true */1;
}

function init(mess) {
  var x = clean(mess);
  return new Promise((function (resolve, _) {
                coq.postMessage(x);
                interval[0] = setInterval((function () {
                        if (Js_primitive.null_to_opt(response[0].match(processeddRe)) !== /* None */0) {
                          clearint(/* () */0);
                          return resolve(x);
                        } else {
                          return 0;
                        }
                      }), 100);
                return /* () */0;
              }));
}

function sentmessage(mess) {
  var x = clean(mess);
  return new Promise((function (resolve, _) {
                response[0] = "";
                coq.postMessage(x);
                interval[0] = setInterval((function () {
                        response[0].match(completedRe);
                        if (Js_primitive.null_to_opt(response[0].match(completedRe)) !== /* None */0) {
                          var z = response[0].match(addedRe);
                          if (z !== null) {
                            var ansid = getmax("Added", response[0], 0);
                            clearint(/* () */0);
                            return resolve(/* Correct */Block.__(0, [ansid]));
                          } else if (Js_primitive.null_to_opt(response[0].match(errorRe)) !== /* None */0) {
                            var err = Index.geterr("(" + (response[0] + ")"));
                            var error = $$String.concat("\n", err);
                            resolve(/* Err */Block.__(1, [error]));
                            return clearint(/* () */0);
                          } else {
                            return 0;
                          }
                        } else {
                          return 0;
                        }
                      }), 100);
                return /* () */0;
              }));
}

function execute(addedResponse) {
  return new Promise((function (resolve, _) {
                switch (addedResponse.tag | 0) {
                  case 0 : 
                      var ex = "(Exec " + (addedResponse[0] + ")");
                      response[0] = "";
                      coq.postMessage(ex);
                      interval[0] = setInterval((function () {
                              if (Js_primitive.null_to_opt(response[0].match(completedRe)) !== /* None */0) {
                                var sid = getmax("id", response[0], 0);
                                clearint(/* () */0);
                                return resolve(/* Correct */Block.__(0, [sid]));
                              } else if (Js_primitive.null_to_opt(response[0].match(errorRe)) !== /* None */0) {
                                var z = response[0].match(idRe);
                                if (z !== null) {
                                  var err = Index.geterr("(" + (response[0] + ")"));
                                  var error = $$String.concat("\n", err);
                                  var sid$1 = getmax("id", response[0], 0);
                                  console.log("this is the main thing " + (response[0] + "\n and this"));
                                  coq.postMessage("(Cancel (" + (sid$1 + "))"));
                                  clearint(/* () */0);
                                  return resolve(/* Err */Block.__(1, [error]));
                                } else {
                                  return /* () */0;
                                }
                              } else {
                                return 0;
                              }
                            }), 100);
                      return /* () */0;
                  case 1 : 
                      return resolve(/* Err */Block.__(1, [addedResponse[0]]));
                  case 2 : 
                      throw [
                            Caml_builtin_exceptions.match_failure,
                            [
                              "coqmanager.re",
                              182,
                              6
                            ]
                          ];
                  
                }
              }));
}

function cancel(addedResponse) {
  return new Promise((function (resolve, _) {
                var ex = "(Cancel (" + (addedResponse + "))");
                response[0] = "";
                coq.postMessage(ex);
                interval[0] = setInterval((function () {
                        if (Js_primitive.null_to_opt(response[0].match(canceledRe)) !== /* None */0) {
                          var sid = getmax("id", response[0], 0);
                          clearint(/* () */0);
                          return resolve(/* Correct */Block.__(0, [sid]));
                        } else {
                          var z = response[0].match(idRe);
                          if (z !== null) {
                            var err = Index.geterr("(" + (response[0] + ")"));
                            var error = $$String.concat("\n", err);
                            getmax("id", response[0], 0);
                            clearint(/* () */0);
                            return resolve(/* Err */Block.__(1, [error]));
                          } else {
                            return /* () */0;
                          }
                        }
                      }), 100);
                return /* () */0;
              }));
}

function process_string(x) {
  var list = x.split("============================");
  var list1 = List.filter((function (a) {
            if (a !== "none") {
              return +(a !== "");
            } else {
              return /* false */0;
            }
          }))($$Array.to_list(list));
  var c = List.hd(List.tl(list1));
  var h = List.hd(list1).split("\n");
  var conc = "$$" + (Index.mylatex(c) + "$$");
  var hyps = List.map((function (x) {
          var y = $$Array.to_list(x.split(":"));
          return "$$\\textbf{" + (List.hd(y) + (" : } " + (Index.mylatex($$String.concat(":", List.tl(y))) + "$$")));
        }), $$Array.to_list(h));
  return {
          hyps: hyps,
          conc: conc
        };
}

function qquery(obtainedId) {
  return new Promise((function (resolve, _) {
                switch (obtainedId.tag | 0) {
                  case 0 : 
                      var a = obtainedId[0];
                      response[0] = "";
                      var qe = "(Query ((sid " + (a + ")(pp ((pp_format PpStr))))  Goals)");
                      coq.postMessage(qe);
                      interval[0] = setInterval((function () {
                              if (Js_primitive.null_to_opt(response[0].match(completedRe)) !== /* None */0) {
                                var text;
                                try {
                                  text = List.hd(Index.getgoals(response[0]));
                                }
                                catch (exn){
                                  text = "";
                                }
                                listofids[0] = Pervasives.$at(listofids[0], /* :: */[
                                      /* :: */[
                                        a,
                                        /* :: */[
                                          text,
                                          /* [] */0
                                        ]
                                      ],
                                      /* [] */0
                                    ]);
                                resolve(/* Final */Block.__(2, [/* record */[
                                          /* id */a,
                                          /* goals */text,
                                          /* exitTactic */""
                                        ]]));
                                return clearint(/* () */0);
                              } else {
                                return 0;
                              }
                            }), 100);
                      return /* () */0;
                  case 1 : 
                      return resolve(/* Err */Block.__(1, [obtainedId[0]]));
                  case 2 : 
                      throw [
                            Caml_builtin_exceptions.match_failure,
                            [
                              "coqmanager.re",
                              287,
                              6
                            ]
                          ];
                  
                }
              }));
}

function pdeal(x) {
  return init(x).then(sentmessage).then(execute);
}

function deal(x) {
  return sentmessage(x).then(execute).then(qquery);
}

function canceldeal(x) {
  return cancel(x).then(qquery);
}

function initiate() {
  return pdeal(initial).then((function () {
                  return pdeal("(Add () \"From Coq Require Import Utf8.\")");
                })).then((function () {
                return pdeal("(Add () \"Axiom classic : forall P:Prop, P \\/ not P.\")");
              }));
}

function maketab(string, goal) {
  if (goal) {
    return Formulaparsing.produce_possible_tactics_goal(Formulaparsing.parse(string), "", /* true */1);
  } else {
    var y = $$Array.to_list(string.split(":"));
    if (List.length(y) > 1) {
      var name = List.hd(y);
      var expression = $$String.concat(":", List.tl(y));
      return Formulaparsing.produce_possible_tactics_goal(Formulaparsing.parse(expression), name, /* false */0);
    } else {
      return /* [] */0;
    }
  }
}

function lisofproms(list, agg) {
  return List.fold_left((function (a, b) {
                return a.then((function () {
                              console.log("here\n\n");
                              console.log(b);
                              console.log("now\n\n");
                              return pdeal("(Add () \"" + (String(b) + " \")"));
                            }));
              }), agg, list);
}

var comm = /* [] */0;

exports.goalstuffToJs = goalstuffToJs;
exports.goalstuffFromJs = goalstuffFromJs;
exports.coq = coq;
exports.response = response;
exports.listofids = listofids;
exports.CoqErr = CoqErr;
exports.completedRe = completedRe;
exports.canceledRe = canceledRe;
exports.processeddRe = processeddRe;
exports.addedRe = addedRe;
exports.errorRe = errorRe;
exports.idRe = idRe;
exports.interval = interval;
exports.clearint = clearint;
exports.msgBackHandler = msgBackHandler;
exports.com = com;
exports.initial = initial;
exports.comm = comm;
exports.getmax = getmax;
exports.getmax1 = getmax1;
exports.clean = clean;
exports.checktactic = checktactic;
exports.init = init;
exports.sentmessage = sentmessage;
exports.execute = execute;
exports.cancel = cancel;
exports.process_string = process_string;
exports.qquery = qquery;
exports.pdeal = pdeal;
exports.deal = deal;
exports.canceldeal = canceldeal;
exports.initiate = initiate;
exports.maketab = maketab;
exports.lisofproms = lisofproms;
/* coq Not a pure module */
