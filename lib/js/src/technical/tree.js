// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Index = require("./index.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function bl(v, w) {
  if (w) {
    if (v) {
      var x = v[0];
      if (Caml_obj.caml_equal(x, w[0])) {
        return /* :: */[
                /* [] */0,
                bl(v, w[1])
              ];
      } else {
        var r = bl(v[1], w);
        if (r === /* [] */0) {
          return /* :: */[
                  /* :: */[
                    x,
                    /* [] */0
                  ],
                  /* [] */0
                ];
        } else {
          return /* :: */[
                  /* :: */[
                    x,
                    List.hd(r)
                  ],
                  List.tl(r)
                ];
        }
      }
    } else {
      return /* [] */0;
    }
  } else {
    return /* :: */[
            v,
            /* [] */0
          ];
  }
}

function breakval(li, str) {
  if (li) {
    var t = li[1];
    var x = li[0];
    if ($$String.trim(x) === $$String.trim(str)) {
      return /* :: */[
              /* [] */0,
              breakval(t, str)
            ];
    } else {
      var r = breakval(t, str);
      if (r === /* [] */0) {
        return /* :: */[
                /* :: */[
                  x,
                  /* [] */0
                ],
                /* [] */0
              ];
      } else {
        return /* :: */[
                /* :: */[
                  x,
                  List.hd(r)
                ],
                List.tl(r)
              ];
      }
    }
  } else {
    return /* [] */0;
  }
}

function breaklist(arr, pats) {
  var list = $$Array.to_list(arr);
  var lpats = $$Array.to_list(pats);
  return $$Array.of_list(List.map($$Array.of_list, bl(list, lpats)));
}

function stclean(x) {
  var re = new RegExp("\n", "g");
  return $$String.trim(x).replace(re, "<br>");
}

function union(l, f) {
  return List.fold_left((function (a, b) {
                return Pervasives.$at(a, List.filter((function (x) {
                                    return 1 - List.mem(Curry._1(f, x), List.map(f, a));
                                  }))(b));
              }), /* [] */0, l);
}

function position(listofids) {
  var levelGoals = List.map((function (x) {
          return List.map((function (x) {
                        return {
                                parent: "",
                                txt: stclean(x),
                                leavingtactic: ""
                              };
                      }), $$Array.to_list(x.split("\n\n")));
        }), listofids);
  var allgoals = union(levelGoals, (function (x) {
          return x.txt;
        }));
  return List.fold_left((function (param, newgoals) {
                var newhead = param[0];
                return /* tuple */[
                        List.hd(newgoals).txt,
                        List.map((function (x) {
                                return {
                                        parent: List.mem(x.txt, List.map((function (vv) {
                                                    return vv.txt;
                                                  }), newgoals)) && x.parent === "" ? newhead : x.parent,
                                        txt: x.txt,
                                        leavingtactic: ""
                                      };
                              }), param[1])
                      ];
              }), /* tuple */[
              "-1",
              allgoals
            ], levelGoals);
}

function modtreemap(_t, l) {
  while(true) {
    var t = _t;
    if (t.children.length) {
      var chi = $$Array.map((function (x) {
              return modtreemap(x, l);
            }), t.children);
      return {
              innerHTML: stclean(t.innerHTML),
              leavingtactic: t.leavingtactic,
              children: chi
            };
    } else {
      var s = List.filter((function(t){
            return function (x) {
              return +(x.parent === t.innerHTML);
            }
            }(t)))(l);
      if (List.length(s) === 0) {
        return {
                innerHTML: stclean(t.innerHTML),
                leavingtactic: t.leavingtactic,
                children: /* array */[]
              };
      } else {
        var li = List.map((function (x) {
                return {
                        innerHTML: stclean(x.txt),
                        leavingtactic: x.leavingtactic,
                        children: /* array */[]
                      };
              }), s);
        var newt = {
          innerHTML: stclean(t.innerHTML),
          leavingtactic: t.leavingtactic,
          children: $$Array.of_list(li)
        };
        _t = newt;
        continue ;
        
      }
    }
  };
}

function makejsontree(listofids) {
  var l = position(listofids)[1];
  var head = List.hd(List.filter((function (x) {
                return +(x.parent === "-1");
              }))(l));
  var tree = {
    innerHTML: stclean(head.txt),
    leavingtactic: head.leavingtactic,
    children: /* array */[]
  };
  return modtreemap(tree, l);
}

function decode(str) {
  var li = str.split("<br>");
  var modar = $$Array.map(Index.myprint, li);
  var modli = $$Array.to_list(modar);
  return $$String.concat("<br>", modli);
}

function cleantree(t) {
  var txt = t.innerHTML;
  return {
          innerHTML: decode(txt),
          leavingtactic: "",
          children: $$Array.map(cleantree, t.children)
        };
}

function makelongertree(t) {
  if (t.leavingtactic !== "") {
    return t;
  } else {
    var t1 = {
      innerHTML: "<p style='background-color:#ccffff;'>" + (t.leavingtactic + "</p>"),
      leavingtactic: "",
      children: $$Array.map(makelongertree, t.children)
    };
    return {
            innerHTML: t.innerHTML,
            leavingtactic: "",
            children: /* array */[t1]
          };
  }
}

exports.bl = bl;
exports.breakval = breakval;
exports.breaklist = breaklist;
exports.stclean = stclean;
exports.union = union;
exports.position = position;
exports.modtreemap = modtreemap;
exports.makejsontree = makejsontree;
exports.decode = decode;
exports.cleantree = cleantree;
exports.makelongertree = makelongertree;
/* Index Not a pure module */
