// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Formulaparser.MenhirBasics.Error");

var MenhirBasics = /* module */[/* Error */$$Error];

function _menhir_run29(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState29 */10, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              116,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState29 */10);
  }
  
}

function _menhir_errorcase(_, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    if (_menhir_s >= 25) {
      throw $$Error;
    } else {
      __menhir_s = _menhir_stack[1];
      __menhir_stack = _menhir_stack[0];
      continue ;
      
    }
  };
}

function _menhir_run8(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 10 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 13 : 
            return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 19 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 20 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
        case 25 : 
            __menhir_s = /* MenhirState8 */19;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                2069,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */19);
    }
    
  };
}

function _menhir_run6(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        case 10 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        case 13 : 
            return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        case 19 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        case 20 : 
            __menhir_s = /* MenhirState6 */20;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        case 25 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                2030,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState6 */20);
    }
    
  };
}

function _menhir_run5(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        case 10 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        case 13 : 
            return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        case 19 : 
            __menhir_s = /* MenhirState5 */21;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            case 20 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        case 25 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                2003,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState5 */21);
    }
    
  };
}

function _menhir_run3(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        case 10 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        case 13 : 
            __menhir_s = /* MenhirState3 */22;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            case 19 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        case 20 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        case 25 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                1956,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */22);
    }
    
  };
}

function _menhir_run7(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_expr(_menhir_env$1, _menhir_stack, _menhir_s, /* EmptySet */1);
}

function _menhir_run2(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        case 10 : 
            __menhir_s = /* MenhirState2 */23;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            case 13 : 
            return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        case 19 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        case 20 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        case 25 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                1929,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */23);
    }
    
  };
}

function _menhir_run1(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
            __menhir_s = /* MenhirState1 */24;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
            case 10 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        case 13 : 
            return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        case 19 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        case 20 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        case 23 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        case 25 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                1902,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */24);
    }
    
  };
}

function _menhir_run4(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* Var */Block.__(0, [_v]);
  return _menhir_goto_func(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error : false */0
        ];
}

function _menhir_run43(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState43 */4, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              298,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState43 */4);
  }
  
}

function _menhir_run16(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState16 */16, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              506,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState16 */16);
  }
  
}

function _menhir_run34(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState34 */8, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              220,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState34 */8);
  }
  
}

function _menhir_run20(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState20 */14, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              428,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState20 */14);
  }
  
}

function _menhir_goto_expr(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    switch (_menhir_s) {
      case 0 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1522,
                    8
                  ]
                ];
          }
          var _tok = _menhir_env[/* _menhir_token */2];
          var exit = 0;
          if (typeof _tok === "number") {
            switch (_tok) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 22 : 
              case 26 : 
                  exit = 2;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              default:
                exit = 1;
            }
          } else {
            exit = _tok.tag === 1 ? 2 : 1;
          }
          switch (exit) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1571,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var match = _menhir_stack[0];
                var _v_000 = _menhir_stack[2];
                var _v$1 = /* Forall */Block.__(21, [
                    _v_000,
                    _v
                  ]);
                __v = _v$1;
                __menhir_s = match[1];
                __menhir_stack = match[0];
                continue ;
                
          }
          break;
      case 1 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1396,
                    8
                  ]
                ];
          }
          var _tok$1 = _menhir_env[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 22 : 
              case 26 : 
                  exit$1 = 2;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              default:
                exit$1 = 1;
            }
          } else {
            exit$1 = _tok$1.tag === 1 ? 2 : 1;
          }
          switch (exit$1) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1445,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var match$1 = _menhir_stack[0];
                var _v_000$1 = _menhir_stack[2];
                var _v$2 = /* Exists */Block.__(20, [
                    _v_000$1,
                    _v
                  ]);
                __v = _v$2;
                __menhir_s = match$1[1];
                __menhir_stack = match$1[0];
                continue ;
                
          }
          break;
      case 2 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1324,
                    8
                  ]
                ];
          }
          var _tok$2 = _menhir_env[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$2 === "number") {
            switch (_tok$2) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 22 : 
              case 26 : 
                  exit$2 = 2;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              default:
                exit$2 = 1;
            }
          } else if (_tok$2.tag === 1) {
            var _menhir_env$1 = _menhir_discard(_menhir_env);
            var _v_000$2 = _menhir_stack[2];
            var _v_001 = /* List */Block.__(22, [/* :: */[
                  _v,
                  /* :: */[
                    /* Var */Block.__(0, [_tok$2[0]]),
                    /* [] */0
                  ]
                ]]);
            var _v$3 = /* Implies */Block.__(8, [
                _v_000$2,
                _v_001
              ]);
            __v = _v$3;
            __menhir_s = _menhir_stack[1];
            __menhir_stack = _menhir_stack[0];
            __menhir_env = _menhir_env$1;
            continue ;
            
          } else {
            exit$2 = 1;
          }
          switch (exit$2) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1389,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$3 = _menhir_stack[2];
                var _v$4 = /* Implies */Block.__(8, [
                    _v_000$3,
                    _v
                  ]);
                __v = _v$4;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 3 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1273,
                    8
                  ]
                ];
          }
          var _tok$3 = _menhir_env[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number") {
            switch (_tok$3) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 9 : 
              case 17 : 
              case 22 : 
              case 26 : 
                  exit$3 = 2;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              default:
                exit$3 = 1;
            }
          } else {
            exit$3 = _tok$3.tag === 1 ? 2 : 1;
          }
          switch (exit$3) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1317,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$4 = _menhir_stack[2];
                var _v$5 = /* And */Block.__(10, [
                    _v_000$4,
                    _v
                  ]);
                __v = _v$5;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 4 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1226,
                    8
                  ]
                ];
          }
          var _tok$4 = _menhir_env[/* _menhir_token */2];
          var exit$4 = 0;
          if (typeof _tok$4 === "number") {
            switch (_tok$4) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 9 : 
              case 17 : 
              case 22 : 
              case 26 : 
              case 27 : 
                  exit$4 = 2;
                  break;
              default:
                exit$4 = 1;
            }
          } else {
            exit$4 = _tok$4.tag === 1 ? 2 : 1;
          }
          switch (exit$4) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1266,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$5 = _menhir_stack[2];
                var _v$6 = /* Equals */Block.__(18, [
                    _v_000$5,
                    _v
                  ]);
                __v = _v$6;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 5 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1181,
                    8
                  ]
                ];
          }
          var _tok$5 = _menhir_env[/* _menhir_token */2];
          var exit$5 = 0;
          if (typeof _tok$5 === "number") {
            switch (_tok$5) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 9 : 
              case 17 : 
              case 21 : 
              case 22 : 
              case 26 : 
              case 27 : 
                  exit$5 = 2;
                  break;
              default:
                exit$5 = 1;
            }
          } else {
            exit$5 = _tok$5.tag === 1 ? 2 : 1;
          }
          switch (exit$5) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1219,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v$7 = /* Not */Block.__(19, [/* Equals */Block.__(18, [
                        _menhir_stack[2],
                        _v
                      ])]);
                __v = _v$7;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 6 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1128,
                    8
                  ]
                ];
          }
          var _tok$6 = _menhir_env[/* _menhir_token */2];
          var exit$6 = 0;
          if (typeof _tok$6 === "number") {
            switch (_tok$6) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 6 : 
              case 17 : 
              case 22 : 
              case 26 : 
                  exit$6 = 2;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              default:
                exit$6 = 1;
            }
          } else {
            exit$6 = _tok$6.tag === 1 ? 2 : 1;
          }
          switch (exit$6) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1174,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$6 = _menhir_stack[2];
                var _v$8 = /* Or */Block.__(11, [
                    _v_000$6,
                    _v
                  ]);
                __v = _v$8;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 7 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1087,
                    8
                  ]
                ];
          }
          var _tok$7 = _menhir_env[/* _menhir_token */2];
          var exit$7 = 0;
          if (typeof _tok$7 === "number") {
            switch (_tok$7) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 16 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$7 = 1;
                  break;
              default:
                exit$7 = 2;
            }
          } else {
            exit$7 = _tok$7.tag ? 2 : 1;
          }
          switch (exit$7) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1121,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$7 = _menhir_stack[2];
                var _v$9 = /* In */Block.__(14, [
                    _v_000$7,
                    _v
                  ]);
                __v = _v$9;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 8 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1029,
                    8
                  ]
                ];
          }
          var _tok$8 = _menhir_env[/* _menhir_token */2];
          var exit$8 = 0;
          if (typeof _tok$8 === "number") {
            switch (_tok$8) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$8 = 1;
                  break;
              default:
                var _v_000$8 = _menhir_stack[2];
                var _v$10 = /* Intersection */Block.__(13, [
                    _v_000$8,
                    _v
                  ]);
                __v = _v$10;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
            }
          } else if (_tok$8.tag) {
            var _menhir_env$2 = _menhir_discard(_menhir_env);
            var _v$11 = /* List */Block.__(22, [/* :: */[
                  /* Intersection */Block.__(13, [
                      _menhir_stack[2],
                      _v
                    ]),
                  /* :: */[
                    /* Var */Block.__(0, [_tok$8[0]]),
                    /* [] */0
                  ]
                ]]);
            __v = _v$11;
            __menhir_s = _menhir_stack[1];
            __menhir_stack = _menhir_stack[0];
            __menhir_env = _menhir_env$2;
            continue ;
            
          } else {
            exit$8 = 1;
          }
          if (exit$8 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      1080,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 9 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    984,
                    8
                  ]
                ];
          }
          var _tok$9 = _menhir_env[/* _menhir_token */2];
          var exit$9 = 0;
          if (typeof _tok$9 === "number") {
            switch (_tok$9) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$9 = 1;
                  break;
              default:
                exit$9 = 2;
            }
          } else {
            exit$9 = _tok$9.tag ? 2 : 1;
          }
          switch (exit$9) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1022,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$9 = _menhir_stack[2];
                var _v$12 = /* Subset */Block.__(17, [
                    _v_000$9,
                    _v
                  ]);
                __v = _v$12;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 10 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    928,
                    8
                  ]
                ];
          }
          var _tok$10 = _menhir_env[/* _menhir_token */2];
          var exit$10 = 0;
          if (typeof _tok$10 === "number") {
            switch (_tok$10) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$10 = 1;
                  break;
              default:
                var _v_000$10 = _menhir_stack[2];
                var _v$13 = /* Union */Block.__(12, [
                    _v_000$10,
                    _v
                  ]);
                __v = _v$13;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
            }
          } else if (_tok$10.tag) {
            var _menhir_env$3 = _menhir_discard(_menhir_env);
            var _v$14 = /* List */Block.__(22, [/* :: */[
                  /* Union */Block.__(12, [
                      _menhir_stack[2],
                      _v
                    ]),
                  /* :: */[
                    /* Var */Block.__(0, [_tok$10[0]]),
                    /* [] */0
                  ]
                ]]);
            __v = _v$14;
            __menhir_s = _menhir_stack[1];
            __menhir_stack = _menhir_stack[0];
            __menhir_env = _menhir_env$3;
            continue ;
            
          } else {
            exit$10 = 1;
          }
          if (exit$10 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      977,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 11 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    823,
                    8
                  ]
                ];
          }
          var _tok$11 = _menhir_env[/* _menhir_token */2];
          var exit$11 = 0;
          if (typeof _tok$11 === "number") {
            switch (_tok$11) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$11 = 1;
                  break;
              default:
                exit$11 = 2;
            }
          } else {
            exit$11 = _tok$11.tag ? 2 : 1;
          }
          switch (exit$11) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          851,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$11 = _menhir_stack[2];
                var _v$15 = /* Div */Block.__(5, [
                    _v_000$11,
                    _v
                  ]);
                __v = _v$15;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 12 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    786,
                    8
                  ]
                ];
          }
          var _tok$12 = _menhir_env[/* _menhir_token */2];
          var exit$12 = 0;
          if (typeof _tok$12 === "number") {
            switch (_tok$12) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$12 = 1;
                  break;
              default:
                exit$12 = 2;
            }
          } else {
            exit$12 = _tok$12.tag ? 2 : 1;
          }
          switch (exit$12) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          816,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$12 = _menhir_stack[2];
                var _v$16 = /* Le */Block.__(2, [
                    _v_000$12,
                    _v
                  ]);
                __v = _v$16;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 13 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    755,
                    8
                  ]
                ];
          }
          var _tok$13 = _menhir_env[/* _menhir_token */2];
          var exit$13 = 0;
          if (typeof _tok$13 === "number") {
            switch (_tok$13) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$13 = 1;
                  break;
              default:
                exit$13 = 2;
            }
          } else {
            exit$13 = _tok$13.tag ? 2 : 1;
          }
          switch (exit$13) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          779,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$13 = _menhir_stack[2];
                var _v$17 = /* Minus */Block.__(6, [
                    _v_000$13,
                    _v
                  ]);
                __v = _v$17;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 14 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    722,
                    8
                  ]
                ];
          }
          var _tok$14 = _menhir_env[/* _menhir_token */2];
          var exit$14 = 0;
          if (typeof _tok$14 === "number") {
            switch (_tok$14) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$14 = 1;
                  break;
              default:
                exit$14 = 2;
            }
          } else {
            exit$14 = _tok$14.tag ? 2 : 1;
          }
          switch (exit$14) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          748,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$14 = _menhir_stack[2];
                var _v$18 = /* Add */Block.__(4, [
                    _v_000$14,
                    _v
                  ]);
                __v = _v$18;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 15 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    693,
                    8
                  ]
                ];
          }
          var _tok$15 = _menhir_env[/* _menhir_token */2];
          var exit$15 = 0;
          if (typeof _tok$15 === "number") {
            switch (_tok$15) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$15 = 1;
                  break;
              default:
                exit$15 = 2;
            }
          } else {
            exit$15 = _tok$15.tag ? 2 : 1;
          }
          switch (exit$15) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          715,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$15 = _menhir_stack[2];
                var _v$19 = /* Setminus */Block.__(16, [
                    _v_000$15,
                    _v
                  ]);
                __v = _v$19;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 16 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    670,
                    8
                  ]
                ];
          }
          var _tok$16 = _menhir_env[/* _menhir_token */2];
          var exit$16 = 0;
          if (typeof _tok$16 === "number") {
            switch (_tok$16) {
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$16 = 1;
                  break;
              default:
                exit$16 = 2;
            }
          } else {
            exit$16 = _tok$16.tag ? 2 : 1;
          }
          switch (exit$16) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          686,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$16 = _menhir_stack[2];
                var _v$20 = /* Iff */Block.__(9, [
                    _v_000$16,
                    _v
                  ]);
                __v = _v$20;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 17 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    645,
                    8
                  ]
                ];
          }
          var _tok$17 = _menhir_env[/* _menhir_token */2];
          var exit$17 = 0;
          if (typeof _tok$17 === "number") {
            switch (_tok$17) {
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$17 = 1;
                  break;
              default:
                exit$17 = 2;
            }
          } else {
            exit$17 = _tok$17.tag ? 2 : 1;
          }
          switch (exit$17) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          663,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$17 = _menhir_stack[2];
                var _v$21 = /* Pow */Block.__(3, [
                    _v_000$17,
                    _v
                  ]);
                __v = _v$21;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 18 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    618,
                    8
                  ]
                ];
          }
          var _tok$18 = _menhir_env[/* _menhir_token */2];
          var exit$18 = 0;
          if (typeof _tok$18 === "number") {
            switch (_tok$18) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$18 = 1;
                  break;
              default:
                exit$18 = 2;
            }
          } else {
            exit$18 = _tok$18.tag ? 2 : 1;
          }
          switch (exit$18) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          638,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v_000$18 = _menhir_stack[2];
                var _v$22 = /* Times */Block.__(7, [
                    _v_000$18,
                    _v
                  ]);
                __v = _v$22;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 19 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    581,
                    8
                  ]
                ];
          }
          var _tok$19 = _menhir_env[/* _menhir_token */2];
          var exit$19 = 0;
          if (typeof _tok$19 === "number") {
            switch (_tok$19) {
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$19 = 1;
                  break;
              default:
                exit$19 = 2;
            }
          } else {
            exit$19 = _tok$19.tag ? 2 : 1;
          }
          switch (exit$19) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          611,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v$23 = /* Complement */Block.__(15, [_v]);
                __v = _v$23;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 20 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    858,
                    8
                  ]
                ];
          }
          var _tok$20 = _menhir_env[/* _menhir_token */2];
          var exit$20 = 0;
          if (typeof _tok$20 === "number") {
            switch (_tok$20) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 6 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 22 : 
              case 23 : 
              case 25 : 
                  exit$20 = 1;
                  break;
              case 26 : 
                  var _menhir_env$4 = _menhir_discard(_menhir_env);
                  var _tok$21 = _menhir_env$4[/* _menhir_token */2];
                  var exit$21 = 0;
                  if (typeof _tok$21 === "number") {
                    switch (_tok$21) {
                      case 2 : 
                          return _menhir_run1(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 10 : 
                          return _menhir_run2(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 13 : 
                          return _menhir_run3(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 19 : 
                          return _menhir_run5(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 20 : 
                          return _menhir_run6(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 23 : 
                          return _menhir_run7(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      case 25 : 
                          return _menhir_run8(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                      default:
                        exit$21 = 2;
                    }
                  } else if (_tok$21.tag === 1) {
                    return _menhir_run4(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1, _tok$21[0]);
                  } else {
                    exit$21 = 2;
                  }
                  if (exit$21 === 2) {
                    if (_menhir_env$4[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            [
                              "formulaparser.ml",
                              885,
                              16
                            ]
                          ];
                    }
                    _menhir_env$4[/* _menhir_error */3] = /* true */1;
                    return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState50 */1);
                  }
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              
            }
          } else {
            exit$20 = 1;
          }
          if (exit$20 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      921,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 21 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1452,
                    8
                  ]
                ];
          }
          var _tok$22 = _menhir_env[/* _menhir_token */2];
          var exit$22 = 0;
          if (typeof _tok$22 === "number") {
            switch (_tok$22) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 6 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 22 : 
              case 23 : 
              case 25 : 
                  exit$22 = 1;
                  break;
              case 26 : 
                  var _menhir_env$5 = _menhir_discard(_menhir_env);
                  var _tok$23 = _menhir_env$5[/* _menhir_token */2];
                  var exit$23 = 0;
                  if (typeof _tok$23 === "number") {
                    switch (_tok$23) {
                      case 2 : 
                          return _menhir_run1(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 10 : 
                          return _menhir_run2(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 13 : 
                          return _menhir_run3(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 19 : 
                          return _menhir_run5(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 20 : 
                          return _menhir_run6(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 23 : 
                          return _menhir_run7(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      case 25 : 
                          return _menhir_run8(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                      default:
                        exit$23 = 2;
                    }
                  } else if (_tok$23.tag === 1) {
                    return _menhir_run4(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0, _tok$23[0]);
                  } else {
                    exit$23 = 2;
                  }
                  if (exit$23 === 2) {
                    if (_menhir_env$5[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            [
                              "formulaparser.ml",
                              1479,
                              16
                            ]
                          ];
                    }
                    _menhir_env$5[/* _menhir_error */3] = /* true */1;
                    return _menhir_errorcase(_menhir_env$5, _menhir_stack$1, /* MenhirState53 */0);
                  }
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              
            }
          } else {
            exit$22 = 1;
          }
          if (exit$22 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      1515,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 22 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1578,
                    8
                  ]
                ];
          }
          var _tok$24 = _menhir_env[/* _menhir_token */2];
          var exit$24 = 0;
          if (typeof _tok$24 === "number") {
            switch (_tok$24) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 6 : 
                  var _menhir_env$6 = _menhir_discard(_menhir_env);
                  __menhir_s = _menhir_stack[1];
                  __menhir_stack = _menhir_stack[0];
                  __menhir_env = _menhir_env$6;
                  continue ;
                  case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 22 : 
              case 23 : 
              case 25 : 
              case 26 : 
                  exit$24 = 1;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              
            }
          } else {
            exit$24 = 1;
          }
          if (exit$24 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      1629,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 23 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1636,
                    8
                  ]
                ];
          }
          var _tok$25 = _menhir_env[/* _menhir_token */2];
          var exit$25 = 0;
          if (typeof _tok$25 === "number") {
            switch (_tok$25) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$25 = 1;
                  break;
              default:
                exit$25 = 2;
            }
          } else {
            exit$25 = _tok$25.tag ? 2 : 1;
          }
          switch (exit$25) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1674,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v$24 = /* Not */Block.__(19, [_v]);
                __v = _v$24;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 24 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1681,
                    8
                  ]
                ];
          }
          var _tok$26 = _menhir_env[/* _menhir_token */2];
          var exit$26 = 0;
          if (typeof _tok$26 === "number") {
            switch (_tok$26) {
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
                  exit$26 = 1;
                  break;
              default:
                exit$26 = 2;
            }
          } else {
            exit$26 = _tok$26.tag ? 2 : 1;
          }
          switch (exit$26) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "formulaparser.ml",
                          1699,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = /* true */1;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 2 : 
                var _v$25 = /* Succ */Block.__(1, [_v]);
                __v = _v$25;
                __menhir_s = _menhir_stack[1];
                __menhir_stack = _menhir_stack[0];
                continue ;
                
          }
          break;
      case 25 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "formulaparser.ml",
                    1706,
                    8
                  ]
                ];
          }
          var _tok$27 = _menhir_env[/* _menhir_token */2];
          var exit$27 = 0;
          if (typeof _tok$27 === "number") {
            switch (_tok$27) {
              case 0 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$1);
              case 1 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$1);
              case 3 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$1);
              case 5 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$1);
              case 7 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$1);
              case 8 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$1);
              case 9 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$1);
              case 11 : 
                  return _menhir_run41(_menhir_env, _menhir_stack$1);
              case 12 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$1);
              case 14 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$1);
              case 15 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$1);
              case 16 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$1);
              case 17 : 
                  return _menhir_run47(_menhir_env, _menhir_stack$1);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$1);
              case 21 : 
                  return _menhir_run43(_menhir_env, _menhir_stack$1);
              case 22 : 
                  return _v;
              case 24 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$1);
              case 2 : 
              case 4 : 
              case 6 : 
              case 10 : 
              case 13 : 
              case 19 : 
              case 20 : 
              case 23 : 
              case 25 : 
              case 26 : 
                  exit$27 = 1;
                  break;
              case 27 : 
                  return _menhir_run45(_menhir_env, _menhir_stack$1);
              
            }
          } else {
            exit$27 = 1;
          }
          if (exit$27 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "formulaparser.ml",
                      1766,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = /* true */1;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      
    }
  };
}

function _menhir_run24(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState24 */12, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              480,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState24 */12);
  }
  
}

function _menhir_run37(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState37 */7, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              246,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState37 */7);
  }
  
}

function _menhir_run22(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState22 */13, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              454,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState22 */13);
  }
  
}

function _menhir_run26(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState26 */11, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              532,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState26 */11);
  }
  
}

function _menhir_run14(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState14 */17, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              402,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState14 */17);
  }
  
}

function _menhir_run32(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState32 */9, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              142,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState32 */9);
  }
  
}

function _menhir_run39(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState39 */6, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              168,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState39 */6);
  }
  
}

function _menhir_run41(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState41 */5, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              194,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState41 */5);
  }
  
}

function _menhir_run18(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState18 */15, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              376,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState18 */15);
  }
  
}

function _menhir_run47(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState47 */2, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              272,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState47 */2);
  }
  
}

function _menhir_run12(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState12 */18, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              350,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState12 */18);
  }
  
}

function _menhir_run45(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState45 */3, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              324,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState45 */3);
  }
  
}

function _menhir_goto_func(__menhir_env, _menhir_stack, _menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_env = __menhir_env;
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              540,
              4
            ]
          ];
    }
    var _tok = _menhir_env[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 2 : 
        case 4 : 
        case 10 : 
        case 13 : 
        case 19 : 
        case 20 : 
        case 23 : 
        case 25 : 
            exit = 1;
            break;
        default:
          return _menhir_goto_expr(_menhir_env, _menhir_stack, _menhir_s, _v);
      }
    } else if (_tok.tag) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var _v$1 = /* List */Block.__(22, [/* :: */[
            _v,
            /* :: */[
              /* Var */Block.__(0, [_tok[0]]),
              /* [] */0
            ]
          ]]);
      __v = _v$1;
      __menhir_env = _menhir_env$1;
      continue ;
      
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "formulaparser.ml",
                569,
                8
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = /* true */1;
      return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    }
    
  };
}

function prog(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error : false */0
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 2 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 10 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 13 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 19 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 20 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 23 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      case 25 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run4(_menhir_env$1, _menhir_stack, /* MenhirState0 */25, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "formulaparser.ml",
              2119,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = /* true */1;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
  }
  
}

var _eRR = $$Error;

exports.MenhirBasics = MenhirBasics;
exports.$$Error = $$Error;
exports._eRR = _eRR;
exports._menhir_run29 = _menhir_run29;
exports._menhir_run32 = _menhir_run32;
exports._menhir_run39 = _menhir_run39;
exports._menhir_run41 = _menhir_run41;
exports._menhir_run34 = _menhir_run34;
exports._menhir_run37 = _menhir_run37;
exports._menhir_run47 = _menhir_run47;
exports._menhir_run43 = _menhir_run43;
exports._menhir_run45 = _menhir_run45;
exports._menhir_run12 = _menhir_run12;
exports._menhir_run18 = _menhir_run18;
exports._menhir_run14 = _menhir_run14;
exports._menhir_run20 = _menhir_run20;
exports._menhir_run22 = _menhir_run22;
exports._menhir_run24 = _menhir_run24;
exports._menhir_run16 = _menhir_run16;
exports._menhir_run26 = _menhir_run26;
exports._menhir_goto_func = _menhir_goto_func;
exports._menhir_goto_expr = _menhir_goto_expr;
exports._menhir_errorcase = _menhir_errorcase;
exports._menhir_run1 = _menhir_run1;
exports._menhir_run2 = _menhir_run2;
exports._menhir_run3 = _menhir_run3;
exports._menhir_run4 = _menhir_run4;
exports._menhir_run5 = _menhir_run5;
exports._menhir_run6 = _menhir_run6;
exports._menhir_run7 = _menhir_run7;
exports._menhir_run8 = _menhir_run8;
exports._menhir_discard = _menhir_discard;
exports.prog = prog;
/* No side effect */
