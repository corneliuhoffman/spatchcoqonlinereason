// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Save = require("./Save.js");
var Tree = require("./technical/tree.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Lists = require("./Lists.js");
var Utils = require("./technical/utils.js");
var React = require("react");
var MyTabs = require("./myTabs.js");
var $$String = require("bs-platform/lib/js/string.js");
var MenuBar = require("./MenuBar.js");
var Commands = require("./technical/commands.js");
var Tutorial = require("./technical/tutorial.js");
var Buttonrow = require("./Buttonrow.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Coqmanager = require("./technical/coqmanager.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var ActivityIndicator = require("reason-react-primitives/lib/js/src/activityIndicator.js");

function setSectionRef(theRef, param) {
  var newrecord = param[/* state */2].slice();
  /* Update */Block.__(0, [(newrecord[/* loadRef */1] = (theRef == null) ? /* None */0 : [theRef], newrecord)]);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("Controller");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      var commands = List.map((function (x) {
              return List.hd(List.tl(x));
            }), Commands.commandstr);
      var in1 = Coqmanager.initiate(/* () */0);
      var prom = Coqmanager.lisofproms(commands, in1);
      prom.then((function () {
              Curry._1(self[/* send */4], /* Ocupate */Block.__(6, [/* Free */0]));
              return Promise.resolve("done");
            }));
      var newrecord = self[/* state */2].slice();
      return /* Update */Block.__(0, [(newrecord[/* w00 */4] = "", newrecord)]);
    });
  newrecord[/* render */9] = (function (self) {
      var onRun = function () {
        var str = Utils.getText(/* () */0).trim();
        var comms = str.split("\n");
        var command0 = Caml_array.caml_array_get(comms, 0).replace(new RegExp("\"", "g"), "\\\"");
        var command1 = command0.replace(new RegExp("'", "g"), "\\'");
        console.log("(Add () \"" + (command1 + "\" )"));
        Curry._1(self[/* send */4], /* Run */Block.__(0, [
                "busy",
                /* Busy */1
              ]));
        Coqmanager.deal("(Add () \"" + (command1 + "\" )")).then((function (re) {
                var exit = 0;
                switch (re.tag | 0) {
                  case 0 : 
                  case 1 : 
                      exit = 1;
                      break;
                  case 2 : 
                      var x = re[0];
                      Curry._1(self[/* send */4], /* W01 */Block.__(2, [x[/* goals */1]]));
                      Curry._1(self[/* send */4], /* W00 */Block.__(1, [self[/* state */2][/* w00 */4] + ("\n" + Caml_array.caml_array_get(comms, 0))]));
                      var rest = $$Array.sub(comms, 1, comms.length - 1 | 0);
                      var newtext = $$String.concat("\n", $$Array.to_list(rest));
                      editor2.setValue(newtext);
                      var newids_000 = /* :: */[
                        x[/* id */0],
                        /* :: */[
                          x[/* goals */1],
                          /* :: */[
                            command1,
                            /* [] */0
                          ]
                        ]
                      ];
                      var newids_001 = self[/* state */2][/* listofids */9];
                      var newids = /* :: */[
                        newids_000,
                        newids_001
                      ];
                      Curry._1(self[/* send */4], /* Run */Block.__(0, [
                              "free",
                              /* Free */0
                            ]));
                      Curry._1(self[/* send */4], /* ListofId */Block.__(5, [newids]));
                      ((MathJax.Hub.Queue(["Reprocess",MathJax.Hub ])));
                      break;
                  
                }
                if (exit === 1) {
                  Curry._1(self[/* send */4], /* Run */Block.__(0, [
                          "free",
                          /* Free */0
                        ]));
                  Curry._1(self[/* send */4], /* W11 */Block.__(4, [re[0]]));
                }
                return Promise.resolve(/* () */0);
              }));
        return /* () */0;
      };
      var tutRun = function () {
        var match = self[/* state */2][/* busy */3];
        if (typeof match === "number") {
          return /* () */0;
        } else {
          var pos = match[1];
          var tuts = match[0];
          var str = Caml_array.caml_array_get(tuts, pos)[/* input */0][/* w10 */0];
          str.split("\n");
          var command0 = str.replace(new RegExp("\"", "g"), "\\\"");
          var command1 = command0.replace(new RegExp("'", "g"), "\\'");
          console.log("(Add () \"" + (command1 + "\" )"));
          Coqmanager.deal("(Add () \"" + (command1 + "\" )")).then((function (re) {
                  switch (re.tag | 0) {
                    case 0 : 
                    case 1 : 
                        Curry._1(self[/* send */4], /* W11 */Block.__(4, [re[0]]));
                        break;
                    case 2 : 
                        var x = re[0];
                        Curry._1(self[/* send */4], /* W01 */Block.__(2, [x[/* goals */1]]));
                        Curry._1(self[/* send */4], /* W00 */Block.__(1, [self[/* state */2][/* w00 */4] + ("\n" + $$String.trim(str))]));
                        var newids_000 = /* :: */[
                          x[/* id */0],
                          /* :: */[
                            x[/* goals */1],
                            /* :: */[
                              command1,
                              /* [] */0
                            ]
                          ]
                        ];
                        var newids_001 = self[/* state */2][/* listofids */9];
                        var newids = /* :: */[
                          newids_000,
                          newids_001
                        ];
                        Curry._1(self[/* send */4], /* ListofId */Block.__(5, [newids]));
                        Curry._1(self[/* send */4], /* UpdateTuts */Block.__(8, [
                                tuts,
                                pos + 1 | 0
                              ]));
                        ((MathJax.Hub.Queue(["Reprocess",MathJax.Hub ])));
                        break;
                    
                  }
                  return Promise.resolve(/* () */0);
                }));
          return /* () */0;
        }
      };
      var tutClick = function (st, _) {
        if (self[/* state */2][/* listofids */9] !== /* [] */0) {
          console.log(self[/* state */2][/* listofids */9]);
          var c = List.hd(List.hd(List.rev(self[/* state */2][/* listofids */9])));
          Coqmanager.canceldeal(c).then((function (re) {
                  switch (re.tag | 0) {
                    case 0 : 
                    case 1 : 
                        Curry._1(self[/* send */4], /* W11 */Block.__(4, [re[0]]));
                        break;
                    case 2 : 
                        Curry._1(self[/* send */4], /* W01 */Block.__(2, [""]));
                        Curry._1(self[/* send */4], /* W00 */Block.__(1, [""]));
                        editor2.setValue("");
                        Curry._1(self[/* send */4], /* ListofId */Block.__(5, [/* [] */0]));
                        break;
                    
                  }
                  return Promise.resolve(/* () */0);
                }));
        }
        Curry._1(self[/* send */4], /* UpdateTuts */Block.__(8, [
                Caml_array.caml_array_get(Tutorial.example, st),
                0
              ]));
        editor2.setValue(Caml_array.caml_array_get(Caml_array.caml_array_get(Tutorial.example, st), 0)[/* input */0][/* w10 */0]);
        return /* () */0;
      };
      var forwardTut = function () {
        var match = self[/* state */2][/* busy */3];
        if (typeof match === "number") {
          return /* () */0;
        } else {
          var pos = match[1];
          var tuts = match[0];
          if (pos < (tuts.length - 1 | 0)) {
            var match$1 = Caml_array.caml_array_get(tuts, pos)[/* output */1];
            switch (match$1) {
              case 0 : 
                  editor2.setValue(Caml_array.caml_array_get(tuts, pos)[/* input */0][/* w10 */0]);
                  tutRun(/* () */0);
                  Curry._1(self[/* send */4], /* W11 */Block.__(4, [Caml_array.caml_array_get(tuts, pos + 1 | 0)[/* input */0][/* w11 */1]]));
                  editor2.setValue(Caml_array.caml_array_get(tuts, pos + 1 | 0)[/* input */0][/* w10 */0]);
                  return Curry._1(self[/* send */4], /* UpdateTuts */Block.__(8, [
                                tuts,
                                pos + 1 | 0
                              ]));
              case 1 : 
                  Curry._1(self[/* send */4], /* W11 */Block.__(4, [Caml_array.caml_array_get(tuts, pos + 1 | 0)[/* input */0][/* w11 */1]]));
                  editor2.setValue(Caml_array.caml_array_get(tuts, pos + 1 | 0)[/* input */0][/* w10 */0]);
                  return Curry._1(self[/* send */4], /* UpdateTuts */Block.__(8, [
                                tuts,
                                pos + 1 | 0
                              ]));
              case 2 : 
                  return /* () */0;
              
            }
          } else {
            return 0;
          }
        }
      };
      var onUndo = function () {
        if (List.length(self[/* state */2][/* listofids */9]) > 0) {
          Utils.getText(/* () */0);
          var currentid = List.hd(self[/* state */2][/* listofids */9]);
          console.log(currentid);
          var comms = self[/* state */2][/* w00 */4].split("\n");
          var command1 = Caml_array.caml_array_get(comms, comms.length - 1 | 0);
          var olds = $$String.concat("\n", $$Array.to_list($$Array.sub(comms, 0, comms.length - 1 | 0)));
          Coqmanager.canceldeal(List.hd(currentid)).then((function (re) {
                  switch (re.tag | 0) {
                    case 0 : 
                    case 1 : 
                        Curry._1(self[/* send */4], /* W11 */Block.__(4, [re[0]]));
                        break;
                    case 2 : 
                        Curry._1(self[/* send */4], /* W01 */Block.__(2, [re[0][/* goals */1]]));
                        Curry._1(self[/* send */4], /* W00 */Block.__(1, [olds]));
                        var rest = $$Array.sub(comms, 1, comms.length - 1 | 0);
                        $$String.concat("\n", $$Array.to_list(rest));
                        editor2.setValue(command1 + ("\n" + Utils.getText(/* () */0)));
                        Curry._1(self[/* send */4], /* ListofId */Block.__(5, [List.tl(self[/* state */2][/* listofids */9])]));
                        break;
                    
                  }
                  return Promise.resolve(/* () */0);
                }));
          return Curry._1(self[/* send */4], /* Undo */0);
        } else {
          return 0;
        }
      };
      var onTree = function () {
        var l = List.map((function (x) {
                return List.hd(List.tl(x));
              }), List.rev(self[/* state */2][/* listofids */9]));
        var lemmas = Tree.breakval(l, "");
        var trees = List.map((function (a) {
                return Tree.cleantree(Tree.makelongertree(Tree.makejsontree(a)));
              }), lemmas);
        var pt = $$Array.of_list(List.map((function (a) {
                    return {
                            chart: {
                              container: "#collapsable-example",
                              animateOnInit: /* true */1,
                              node: {
                                collapsable: /* true */1
                              },
                              animation: {
                                nodeAnimation: "easeOutBounce",
                                nodeSpeed: 700,
                                connectorsAnimation: "bounce",
                                connectorsSpeed: 700
                              }
                            },
                            nodeStructure: a
                          };
                  }), trees));
        JSON.stringify(pt);
        var update = (
 function (a) {allpretrees=a;

 }
);
        Curry._1(update, pt);
        ((window.open("../external/treant/examples/collapsable/index.html?alltrees=`ha`")));
        return /* () */0;
      };
      var saveToggle = function () {
        return Curry._1(self[/* send */4], /* Save */2);
      };
      var onLoad = function () {
        return Curry._1(self[/* send */4], /* Load */3);
      };
      var match = self[/* state */2][/* busy */3];
      return React.createElement("div", {
                  key: "box",
                  style: {
                    display: "inline-grid",
                    height: "100%",
                    width: "100%",
                    gridTemplateColumns: "auto",
                    gridTemplateRows: "5% 45% 45% 5%"
                  },
                  onKeyDown: (function (evt) {
                      if (evt.getModifierState("Control") && evt.key === "r") {
                        onRun(/* () */0);
                      }
                      if (evt.getModifierState("Control") && evt.key === "u") {
                        onUndo(/* () */0);
                      }
                      if (evt.getModifierState("Control") && evt.key === "t") {
                        return onTree(/* () */0);
                      } else {
                        return 0;
                      }
                    })
                }, ReasonReact.element(/* None */0, /* None */0, Save.make(self[/* state */2][/* w00 */4], self[/* state */2][/* save */2], (function () {
                            return Curry._1(self[/* send */4], /* Save */2);
                          }), /* array */[])), ReasonReact.element(/* None */0, /* None */0, MenuBar.make(tutClick, saveToggle, self[/* state */2][/* tooltip */0], onRun, onUndo, onTree, /* array */[])), React.createElement("div", {
                      key: "row0",
                      style: {
                        display: "inline-grid",
                        height: "docment.height",
                        width: "100%",
                        gridTemplateColumns: "50% 50%",
                        gridTemplateRows: "100%"
                      }
                    }, ReasonReact.element(/* Some */["w00"], /* None */0, Lists.make(self[/* state */2][/* w00 */4], "#e6ffe6", /* array */[])), React.createElement("div", {
                          style: {
                            borderStyle: "solid",
                            display: "inline-block",
                            margin: "0px"
                          }
                        }, ReasonReact.element(/* Some */["w01"], /* None */0, MyTabs.make(self[/* state */2][/* w01 */5], /* array */[])))), React.createElement("div", {
                      key: "row1",
                      style: {
                        display: "inline-grid",
                        height: "inherit",
                        width: "100%",
                        gridTemplateColumns: "50% 50%",
                        gridTemplateRows: "100%"
                      }
                    }, React.createElement("textarea", {
                          key: "0",
                          className: "w10",
                          id: "haha",
                          style: {
                            backgroundColor: "white",
                            fontSize: "12px",
                            alignSelf: "left"
                          },
                          value: self[/* state */2][/* w10 */6]
                        }), typeof match === "number" ? (
                        match !== 0 ? React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, ActivityIndicator.make(32.0, /* tuple */[
                                        200,
                                        200,
                                        200
                                      ], /* array */[])), "loading please wait") : ReasonReact.element(/* Some */["w11"], /* None */0, Lists.make(self[/* state */2][/* w11 */7], "lightgrey", /* array */[]))
                      ) : ReasonReact.element(/* Some */["w11"], /* None */0, Lists.make(Caml_array.caml_array_get(match[0], match[1])[/* input */0][/* w11 */1], "lightgrey", /* array */[]))), ReasonReact.element(/* None */0, /* None */0, Buttonrow.make(forwardTut, self[/* state */2][/* busy */3], self[/* state */2][/* tooltip */0], onRun, onUndo, onTree, saveToggle, onLoad, /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* tooltip */(false),
              /* loadRef : None */0,
              /* save */(false),
              /* busy : Busy */1,
              /* w00 */"",
              /* w01 */"",
              /* w10 */"",
              /* w11 */"",
              /* response */"$$\\lambda \\lor$$",
              /* listofids : [] */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              var newrecord = state.slice();
              return /* Update */Block.__(0, [(newrecord[/* response */8] = "uno", newrecord)]);
          case 1 : 
              var newrecord$1 = state.slice();
              return /* Update */Block.__(0, [(newrecord$1[/* response */8] = "$$\\lambda \\mu$$", newrecord$1)]);
          case 2 : 
              var newrecord$2 = state.slice();
              return /* Update */Block.__(0, [(newrecord$2[/* save */2] = 1 - state[/* save */2], newrecord$2)]);
          case 3 : 
              var newrecord$3 = state.slice();
              return /* Update */Block.__(0, [(newrecord$3[/* response */8] = "load", newrecord$3)]);
          
        }
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var newrecord$4 = state.slice();
              return /* Update */Block.__(0, [(newrecord$4[/* busy */3] = action[1], newrecord$4[/* response */8] = action[0], newrecord$4)]);
          case 1 : 
              var newrecord$5 = state.slice();
              return /* Update */Block.__(0, [(newrecord$5[/* w00 */4] = action[0], newrecord$5)]);
          case 2 : 
              var newrecord$6 = state.slice();
              return /* Update */Block.__(0, [(newrecord$6[/* w01 */5] = action[0], newrecord$6)]);
          case 3 : 
              var newrecord$7 = state.slice();
              return /* Update */Block.__(0, [(newrecord$7[/* w10 */6] = action[0], newrecord$7)]);
          case 4 : 
              var newrecord$8 = state.slice();
              return /* Update */Block.__(0, [(newrecord$8[/* w11 */7] = action[0], newrecord$8)]);
          case 5 : 
              var newrecord$9 = state.slice();
              return /* Update */Block.__(0, [(newrecord$9[/* listofids */9] = action[0], newrecord$9)]);
          case 6 : 
              var newrecord$10 = state.slice();
              return /* Update */Block.__(0, [(newrecord$10[/* busy */3] = action[0], newrecord$10)]);
          case 7 : 
              var newrecord$11 = state.slice();
              return /* Update */Block.__(0, [(newrecord$11[/* response */8] = action[0], newrecord$11)]);
          case 8 : 
              var newrecord$12 = state.slice();
              return /* Update */Block.__(0, [(newrecord$12[/* busy */3] = /* Tutorial */[
                            action[0],
                            action[1]
                          ], newrecord$12)]);
          
        }
      }
    });
  return newrecord;
}

exports.setSectionRef = setSectionRef;
exports.component = component;
exports.make = make;
/* component Not a pure module */
