// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Antd_Helpers = require("./Antd_Helpers.js");
var Layout = require("antd/lib/layout");

((require("antd/lib/layout/style")));

function make(id, className, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Layout, tmp, children);
}

function make$1(id, className, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Layout.Header, tmp, children);
}

var Header = /* module */[/* make */make$1];

function make$2(id, className, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Layout.Footer, tmp, children);
}

var Footer = /* module */[/* make */make$2];

function make$3(id, className, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Layout.Content, tmp, children);
}

var Content = /* module */[/* make */make$3];

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -1049001740,
    "responsive"
  ],
  /* tuple */[
    403282384,
    "clickTrigger"
  ]
];

function collapseTypeToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function collapseTypeFromJs(param) {
  return Js_mapperRt.revSearchAssert(2, jsMapperConstantArray, param);
}

function make$4(style, prefixCls, className, collapsible, collapsed, defaultCollapsed, reverseArrow, onCollapse, trigger, width, collapsedWidth, breakpoint, children) {
  var tmp = { };
  if (style) {
    tmp.style = style[0];
  }
  if (prefixCls) {
    tmp.prefixCls = prefixCls[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Antd_Helpers.from_bool, collapsible);
  if (tmp$1) {
    tmp.collapsible = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Antd_Helpers.from_bool, collapsed);
  if (tmp$2) {
    tmp.collapsed = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Antd_Helpers.from_bool, defaultCollapsed);
  if (tmp$3) {
    tmp.defaultCollapsed = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Antd_Helpers.from_bool, reverseArrow);
  if (tmp$4) {
    tmp.reverseArrow = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (fn) {
          return (function (param, param$1) {
              var fn$1 = fn;
              var a = param;
              var b = param$1;
              return Curry._2(fn$1, +a, Js_mapperRt.revSearchAssert(2, jsMapperConstantArray, b));
            });
        }), onCollapse);
  if (tmp$5) {
    tmp.onCollapse = tmp$5[0];
  }
  if (trigger) {
    tmp.trigger = trigger[0];
  }
  if (width) {
    tmp.width = width[0];
  }
  if (collapsedWidth) {
    tmp.collapsedWidth = collapsedWidth[0];
  }
  var tmp$6 = Js_option.map(Antd_Helpers.breakpointToJs, breakpoint);
  if (tmp$6) {
    tmp.breakpoint = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(Layout.Sider, tmp, children);
}

var Sider = /* module */[
  /* collapseTypeToJs */collapseTypeToJs,
  /* collapseTypeFromJs */collapseTypeFromJs,
  /* make */make$4
];

exports.make = make;
exports.Header = Header;
exports.Footer = Footer;
exports.Content = Content;
exports.Sider = Sider;
/*  Not a pure module */
