// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Col = require("antd/lib/grid/col");
var Row = require("antd/lib/grid/row");

((require("antd/lib/grid/style")));

var jsMapperConstantArray = /* array */[/* tuple */[
    -1010954439,
    "flex"
  ]];

function rowTypeToJs(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray);
}

function rowTypeFromJs(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -866200747,
    "middle"
  ],
  /* tuple */[
    -445061397,
    "bottom"
  ],
  /* tuple */[
    5793429,
    "top"
  ]
];

function rowAlignToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$1);
}

function rowAlignFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$1, param);
}

var jsMapperConstantArray$2 = /* array */[
  /* tuple */[
    -1021944796,
    "end"
  ],
  /* tuple */[
    -485895757,
    "spaceAround"
  ],
  /* tuple */[
    67859554,
    "start"
  ],
  /* tuple */[
    98248149,
    "center"
  ],
  /* tuple */[
    516682146,
    "spaceBetween"
  ]
];

function rowJustifyToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$2);
}

function rowJustifyFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$2, param);
}

function makeGutterBreakpoints(xs, sm, md, lg, xl, xxl, _) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (b) {
          return String(b);
        }), xs);
  if (tmp$1) {
    tmp.xs = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (b) {
          return String(b);
        }), sm);
  if (tmp$2) {
    tmp.sm = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (b) {
          return String(b);
        }), md);
  if (tmp$3) {
    tmp.md = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (b) {
          return String(b);
        }), lg);
  if (tmp$4) {
    tmp.lg = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (b) {
          return String(b);
        }), xl);
  if (tmp$5) {
    tmp.xl = tmp$5[0];
  }
  var tmp$6 = Js_option.map((function (b) {
          return String(b);
        }), xxl);
  if (tmp$6) {
    tmp.xxl = tmp$6[0];
  }
  return tmp;
}

function gutterToProp(gutter) {
  return gutter[0];
}

function make(className, gutter, _type, align, justify, style, prefixCls, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (b) {
          return Js_mapperRt.binarySearch(1, b, jsMapperConstantArray);
        }), _type);
  if (tmp$1) {
    tmp.type = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (b) {
          return Js_mapperRt.binarySearch(3, b, jsMapperConstantArray$1);
        }), align);
  if (tmp$2) {
    tmp.align = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (b) {
          return Js_mapperRt.binarySearch(5, b, jsMapperConstantArray$2);
        }), justify);
  if (tmp$3) {
    tmp.justify = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (b) {
          return b[0];
        }), gutter);
  if (tmp$4) {
    tmp.gutter = tmp$4[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  if (prefixCls) {
    tmp.prefixCls = prefixCls[0];
  }
  return ReasonReact.wrapJsForReason(Row, tmp, children);
}

var Row$1 = /* module */[
  /* rowTypeToJs */rowTypeToJs,
  /* rowTypeFromJs */rowTypeFromJs,
  /* rowAlignToJs */rowAlignToJs,
  /* rowAlignFromJs */rowAlignFromJs,
  /* rowJustifyToJs */rowJustifyToJs,
  /* rowJustifyFromJs */rowJustifyFromJs,
  /* makeGutterBreakpoints */makeGutterBreakpoints,
  /* gutterToProp */gutterToProp,
  /* make */make
];

function colSizeToProp(colSize) {
  return colSize[0];
}

function make$1(className, span, order, offset, push, pull, xs, sm, md, lg, xl, xxl, prefixCls, style, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  if (span) {
    tmp.span = span[0];
  }
  if (order) {
    tmp.order = order[0];
  }
  if (offset) {
    tmp.offset = offset[0];
  }
  if (push) {
    tmp.push = push[0];
  }
  if (pull) {
    tmp.pull = pull[0];
  }
  var tmp$1 = Js_option.map((function (b) {
          return b[0];
        }), xs);
  if (tmp$1) {
    tmp.xs = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (b) {
          return b[0];
        }), sm);
  if (tmp$2) {
    tmp.sm = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (b) {
          return b[0];
        }), md);
  if (tmp$3) {
    tmp.md = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (b) {
          return b[0];
        }), lg);
  if (tmp$4) {
    tmp.lg = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (b) {
          return b[0];
        }), xl);
  if (tmp$5) {
    tmp.xl = tmp$5[0];
  }
  var tmp$6 = Js_option.map((function (b) {
          return b[0];
        }), xxl);
  if (tmp$6) {
    tmp.xxl = tmp$6[0];
  }
  if (prefixCls) {
    tmp.prefixCls = prefixCls[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Col, tmp, children);
}

var Col$1 = /* module */[
  /* colSizeToProp */colSizeToProp,
  /* make */make$1
];

function makeColSize(prim, prim$1, prim$2, prim$3, prim$4, _) {
  var tmp = { };
  if (prim) {
    tmp.span = prim[0];
  }
  if (prim$1) {
    tmp.order = prim$1[0];
  }
  if (prim$2) {
    tmp.offset = prim$2[0];
  }
  if (prim$3) {
    tmp.push = prim$3[0];
  }
  if (prim$4) {
    tmp.pull = prim$4[0];
  }
  return tmp;
}

exports.Row = Row$1;
exports.Col = Col$1;
exports.makeGutterBreakpoints = makeGutterBreakpoints;
exports.makeColSize = makeColSize;
/*  Not a pure module */
