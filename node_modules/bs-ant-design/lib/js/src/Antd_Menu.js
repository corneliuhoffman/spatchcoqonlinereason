// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Antd_Helpers = require("./Antd_Helpers.js");
var Menu = require("antd/lib/menu");

((require("antd/lib/menu/style")));

var jsMapperConstantArray = /* array */[
  /* tuple */[
    136970422,
    "light"
  ],
  /* tuple */[
    758939798,
    "dark"
  ]
];

function themeToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function themeFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    -841728391,
    "inline"
  ],
  /* tuple */[
    -645419075,
    "vertical-left"
  ],
  /* tuple */[
    -197188762,
    "vertical-right"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function modeToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$1);
}

function modeFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$1, param);
}

function make(theme, mode, selectable, selectedKeys, defaultSelectedKeys, openKeys, defaultOpenKeys, onOpenChange, onSelect, onDeselect, onClick, openTransitionName, openAnimation, className, prefixCls, multiple, inlineIndent, inlineCollapsed, id, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  var tmp$1 = Js_option.map(themeToJs, theme);
  if (tmp$1) {
    tmp.theme = tmp$1[0];
  }
  var tmp$2 = Js_option.map(modeToJs, mode);
  if (tmp$2) {
    tmp.mode = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Antd_Helpers.from_bool, selectable);
  if (tmp$3) {
    tmp.selectable = tmp$3[0];
  }
  if (selectedKeys) {
    tmp.selectedKeys = selectedKeys[0];
  }
  if (defaultSelectedKeys) {
    tmp.defaultSelectedKeys = defaultSelectedKeys[0];
  }
  if (openKeys) {
    tmp.openKeys = openKeys[0];
  }
  if (defaultOpenKeys) {
    tmp.defaultOpenKeys = defaultOpenKeys[0];
  }
  if (onOpenChange) {
    tmp.onOpenChange = onOpenChange[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onSelect) {
    tmp.onSelect = onSelect[0];
  }
  if (onDeselect) {
    tmp.onDeselect = onDeselect[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  if (openTransitionName) {
    tmp.openTransitionName = openTransitionName[0];
  }
  if (openAnimation) {
    tmp.openAnimation = openAnimation[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (prefixCls) {
    tmp.prefixCls = prefixCls[0];
  }
  var tmp$4 = Js_option.map(Antd_Helpers.from_bool, multiple);
  if (tmp$4) {
    tmp.multiple = tmp$4[0];
  }
  if (inlineIndent) {
    tmp.inlineIndent = inlineIndent[0];
  }
  var tmp$5 = Js_option.map(Antd_Helpers.from_bool, inlineCollapsed);
  if (tmp$5) {
    tmp.inlineCollapsed = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(Menu, tmp, children);
}

function make$1(disabled, key_, id, className, style, children) {
  var tmp = { };
  if (key_) {
    tmp.key = key_[0];
  }
  var tmp$1 = Js_option.map(Antd_Helpers.from_bool, disabled);
  if (tmp$1) {
    tmp.disabled = tmp$1[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Menu.Item, tmp, children);
}

var Item = /* module */[/* make */make$1];

function make$2(disabled, key_, title, onTitleClick, id, className, style, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Antd_Helpers.from_bool, disabled);
  if (tmp$1) {
    tmp.disabled = tmp$1[0];
  }
  if (key_) {
    tmp.key = key_[0];
  }
  if (title) {
    tmp.title = title[0];
  }
  if (onTitleClick) {
    tmp.onTitleClick = onTitleClick[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Menu.SubMenu, tmp, children);
}

var SubMenu = /* module */[/* make */make$2];

function make$3(id, className, style, title, children) {
  var tmp = { };
  if (title) {
    tmp.title = title[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Menu.ItemGroup, tmp, children);
}

var ItemGroup = /* module */[/* make */make$3];

function make$4(id, className, style, children) {
  var tmp = { };
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Menu.Divider, tmp, children);
}

var Divider = /* module */[/* make */make$4];

exports.themeToJs = themeToJs;
exports.themeFromJs = themeFromJs;
exports.modeToJs = modeToJs;
exports.modeFromJs = modeFromJs;
exports.make = make;
exports.Item = Item;
exports.SubMenu = SubMenu;
exports.ItemGroup = ItemGroup;
exports.Divider = Divider;
/*  Not a pure module */
