// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Antd_Helpers = require("./Antd_Helpers.js");
var Radio = require("antd/lib/radio");

((require("antd/lib/radio/style")));

function make(autoFocus, checked, defaultChecked, disabled, value, id, className, style, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Antd_Helpers.from_bool, autoFocus);
  if (tmp$1) {
    tmp.autoFocus = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Antd_Helpers.from_bool, checked);
  if (tmp$2) {
    tmp.checked = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Antd_Helpers.from_bool, defaultChecked);
  if (tmp$3) {
    tmp.defaultChecked = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Antd_Helpers.from_bool, disabled);
  if (tmp$4) {
    tmp.disabled = tmp$4[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Radio.default, tmp, children);
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -272944197,
    "large"
  ],
  /* tuple */[
    -9768761,
    "small"
  ],
  /* tuple */[
    465819841,
    "default"
  ]
];

function sizeToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray);
}

function sizeFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray, param);
}

function make$1(defaultValue, disabled, name, options, size, value, onChange, id, className, style, children) {
  var tmp = {
    defaultValue: defaultValue,
    value: value,
    onChange: onChange
  };
  var tmp$1 = Js_option.map(Antd_Helpers.from_bool, disabled);
  if (tmp$1) {
    tmp.disabled = tmp$1[0];
  }
  if (name) {
    tmp.name = name[0];
  }
  if (options) {
    tmp.options = options[0];
  }
  var tmp$2 = Js_option.map((function (b) {
          return Js_mapperRt.binarySearch(3, b, jsMapperConstantArray);
        }), size);
  if (tmp$2) {
    tmp.size = tmp$2[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  return ReasonReact.wrapJsForReason(Radio.Group, tmp, children);
}

var Group = /* module */[
  /* sizeToJs */sizeToJs,
  /* sizeFromJs */sizeFromJs,
  /* make */make$1
];

exports.make = make;
exports.Group = Group;
/*  Not a pure module */
