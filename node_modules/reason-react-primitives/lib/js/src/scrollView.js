// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("ScrollView");

function setContainerRef(containerRef, param) {
  param[/* state */2][/* containerRef */0][0] = (containerRef == null) ? /* None */0 : [containerRef];
  return /* () */0;
}

function make(onEndReached, $staropt$star, children) {
  var offset = $staropt$star ? $staropt$star[0] : 0;
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", {
                  ref: Curry._1(self[/* handle */0], setContainerRef),
                  style: {
                    overflow: "auto",
                    flexGrow: "1",
                    transform: "translateZ(0)"
                  },
                  onScroll: (function () {
                      return Curry._1(self[/* send */4], /* Scroll */0);
                    })
                }, Caml_array.caml_array_get(children, 0));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* containerRef */[/* None */0]];
    });
  newrecord[/* reducer */12] = (function (_, state) {
      var match = state[/* containerRef */0];
      var match$1 = match[/* contents */0];
      if (match$1 && onEndReached) {
        var onEndReached$1 = onEndReached[0];
        var element = match$1[0];
        var scrollHeight = element.scrollHeight;
        var scrollTop = element.scrollTop;
        var clientHeight = element.clientHeight;
        if ((scrollTop + clientHeight | 0) >= (scrollHeight - offset | 0)) {
          return /* SideEffects */Block.__(2, [(function () {
                        return Curry._1(onEndReached$1, /* () */0);
                      })]);
        } else {
          return /* NoUpdate */0;
        }
      } else {
        return /* NoUpdate */0;
      }
    });
  return newrecord;
}

exports.component = component;
exports.setContainerRef = setContainerRef;
exports.make = make;
/* component Not a pure module */
