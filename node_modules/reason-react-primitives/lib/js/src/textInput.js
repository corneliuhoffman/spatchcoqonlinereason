// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("TextInput");

function setInputRef(inputRef, param) {
  param[/* state */2][/* inputRef */1][0] = (inputRef == null) ? /* None */0 : [inputRef];
  return /* () */0;
}

function make($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, id, name, value, maxLength, style, onTextChange, onKeyDown, onPaste, onFocus, onBlur, focusedStyle, $staropt$star$5, $staropt$star$6, _) {
  var multiline = $staropt$star ? $staropt$star[0] : /* false */0;
  var autoSize = $staropt$star$1 ? $staropt$star$1[0] : /* false */0;
  var autoFocus = $staropt$star$2 ? $staropt$star$2[0] : /* false */0;
  var disabled = $staropt$star$3 ? $staropt$star$3[0] : /* false */0;
  var _type = $staropt$star$4 ? $staropt$star$4[0] : "text";
  var placeholder = $staropt$star$5 ? $staropt$star$5[0] : "";
  var rows = $staropt$star$6 ? $staropt$star$6[0] : 1;
  var measureAndSetHeight = function (_, param) {
    var match = param[/* state */2][/* inputRef */1];
    var match$1 = match[/* contents */0];
    if (match$1) {
      var element = match$1[0];
      element.style.setProperty("height", "0", "");
      var height = element.scrollHeight;
      element.style.setProperty("height", String(height) + "px", "");
      return Curry._1(param[/* send */4], /* SetHeight */[height]);
    } else {
      return /* () */0;
    }
  };
  var handleResize = function (param) {
    if (multiline && autoSize) {
      var handle = param[/* handle */0];
      requestAnimationFrame((function () {
              return Curry._2(handle, measureAndSetHeight, /* () */0);
            }));
      return /* () */0;
    } else {
      return 0;
    }
  };
  var handleChange = handleResize;
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      handleResize(self);
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      var match = state[/* height */0];
      var sizingStyle = {
        fontSize: "16px",
        height: match ? String(match[0]) + "px" : "auto",
        boxSizing: "content-box",
        resize: "none"
      };
      var tmp;
      var exit = 0;
      if (focusedStyle && state[/* focused */2] === /* true */1) {
        tmp = focusedStyle[0];
      } else {
        exit = 1;
      }
      if (exit === 1) {
        tmp = { };
      }
      var tmp$1 = {
        ref: Curry._1(param[/* handle */0], setInputRef),
        style: ReactDOMRe.Style[/* combine */0](style ? ReactDOMRe.Style[/* combine */0](style[0], sizingStyle) : sizingStyle, tmp),
        autoFocus: Js_boolean.to_js_boolean(autoFocus),
        disabled: Js_boolean.to_js_boolean(disabled),
        placeholder: placeholder,
        rows: rows,
        type: _type,
        value: value,
        onFocus: (function ($$event) {
            if (onFocus) {
              Curry._1(onFocus[0], $$event);
            }
            return Curry._1(send, /* Focus */1);
          }),
        onBlur: (function ($$event) {
            if (onBlur) {
              Curry._1(onBlur[0], $$event);
            }
            return Curry._1(send, /* Blur */2);
          }),
        onChange: (function ($$event) {
            Curry._1(onTextChange, $$event.target.value);
            return Curry._1(send, /* Change */0);
          })
      };
      if (id) {
        tmp$1.id = id[0];
      }
      if (maxLength) {
        tmp$1.maxLength = maxLength[0];
      }
      if (name) {
        tmp$1.name = name[0];
      }
      if (onPaste) {
        tmp$1.onPaste = onPaste[0];
      }
      if (onKeyDown) {
        tmp$1.onKeyDown = onKeyDown[0];
      }
      return React.createElement(multiline !== 0 ? "textarea" : "input", tmp$1);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* height : None */0,
              /* inputRef */[/* None */0],
              /* focused : false */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              return /* SideEffects */Block.__(2, [handleChange]);
          case 1 : 
              return /* Update */Block.__(0, [/* record */[
                          /* height */state[/* height */0],
                          /* inputRef */state[/* inputRef */1],
                          /* focused : true */1
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* height */state[/* height */0],
                          /* inputRef */state[/* inputRef */1],
                          /* focused : false */0
                        ]]);
          
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* height : Some */[action[0]],
                    /* inputRef */state[/* inputRef */1],
                    /* focused */state[/* focused */2]
                  ]]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.setInputRef = setInputRef;
exports.make = make;
/* component Not a pure module */
