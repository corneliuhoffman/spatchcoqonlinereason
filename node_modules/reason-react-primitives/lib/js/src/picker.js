// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var LayerManager = require("./layerManager.js");
var TouchableHighlight = require("./touchableHighlight.js");

var component = ReasonReact.reducerComponent("Picker");

var PickerLayerManager = LayerManager.Make([
      LayerManager.DefaultImpl[4],
      LayerManager.DefaultImpl[5],
      LayerManager.DefaultImpl[6],
      LayerManager.DefaultImpl[7],
      LayerManager.DefaultImpl[8]
    ]);

function renderOptionWithEvent(renderOption, onValueChange, value, param, index, item) {
  var send = param[/* send */4];
  var match = +(index === 0);
  return ReasonReact.element(/* Some */[String(index)], /* Some */[match !== 0 ? (function (item) {
                    if (item == null) {
                      return /* () */0;
                    } else {
                      requestAnimationFrame((function () {
                              ReactDom.findDOMNode(item).focus();
                              return /* () */0;
                            }));
                      return /* () */0;
                    }
                  }) : (function () {
                    return /* () */0;
                  })], TouchableHighlight.make((function () {
                    Curry._1(onValueChange, /* Some */[item]);
                    return Curry._1(send, /* HideOptions */3);
                  }), /* Some */["rgba(0, 0, 0, 0.05)"], /* None */0, /* None */0, /* Some */[(function ($$event) {
                      return Curry._1(send, /* MoveFocus */Block.__(3, [/* tuple */[
                                      $$event.keyCode,
                                      $$event.target
                                    ]]));
                    })], /* None */0, /* Some */[(function () {
                      return Curry._1(send, /* Blur */1);
                    })], /* Some */[{
                    cursor: "pointer"
                  }], /* Some */[{
                    backgroundImage: "linear-gradient(to bottom, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05))",
                    outline: "none",
                    opacity: "0.8"
                  }], /* None */0, /* None */0, /* None */0, /* array */[Curry._2(renderOption, item, value)]));
}

function makeLayer(target, param) {
  var send = param[/* send */4];
  Curry._1(PickerLayerManager[/* make */0], /* Contextualized */[
          target,
          /* Bottom */7
        ]).then((function (layer) {
          Curry._1(send, /* SetLayer */Block.__(2, [layer]));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function make(options, renderPicker, renderOption, value, onValueChange, $staropt$star, $staropt$star$1, _) {
  var padding = $staropt$star ? $staropt$star[0] : "10px";
  var disabled = $staropt$star$1 ? $staropt$star$1[0] : /* false */0;
  var whenLayerReady = function (self) {
    var send = self[/* send */4];
    var match = self[/* state */2][/* layer */0];
    if (match) {
      return Curry._2(PickerLayerManager[/* render */1], match[0], React.createElement("div", undefined, React.createElement("div", {
                          style: {
                            bottom: "0",
                            left: "0",
                            position: "fixed",
                            right: "0",
                            top: "0"
                          },
                          onClick: (function () {
                              return Curry._1(send, /* HideOptions */3);
                            })
                        }), React.createElement("div", {
                          style: {
                            backgroundColor: "#fff",
                            overflow: "auto",
                            position: "relative",
                            zIndex: "1",
                            borderBottomLeftRadius: "3px",
                            borderBottomRightRadius: "3px",
                            boxShadow: "0 0 0 1px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.16"
                          }
                        }, $$Array.of_list(List.mapi((function (param, param$1) {
                                    return renderOptionWithEvent(renderOption, onValueChange, value, self, param, param$1);
                                  }), options)))));
    } else {
      return /* () */0;
    }
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var match = param[/* state */2][/* focus */1];
      return React.cloneElement(React.createElement("div", {
                      role: "button",
                      style: ReactDOMRe.Style[/* unsafeAddProp */1]({
                            cursor: disabled !== 0 ? "default" : "pointer",
                            outline: match !== 1 ? "" : "none",
                            padding: padding
                          }, "WebkitTapHighlightColor", "rgba(0, 0, 0, 0)"),
                      tabIndex: 0,
                      onKeyPress: (function ($$event) {
                          var keys_000 = $$event.keyCode;
                          var keys_001 = $$event.charCode;
                          var keys = /* tuple */[
                            keys_000,
                            keys_001
                          ];
                          var match = keys_000;
                          if (match !== 13 && match !== 32) {
                            var match$1 = keys_001;
                            if (match$1 !== 13) {
                              if (match$1 !== 32) {
                                
                              } else {
                                $$event.preventDefault();
                              }
                            } else {
                              $$event.preventDefault();
                            }
                          } else {
                            $$event.preventDefault();
                          }
                          return Curry._1(send, /* KeyPress */Block.__(0, [
                                        keys,
                                        $$event.target
                                      ]));
                        }),
                      onFocus: (function () {
                          return Curry._1(send, /* Focus */0);
                        }),
                      onBlur: (function () {
                          return Curry._1(send, /* Blur */1);
                        }),
                      onClick: (function ($$event) {
                          return Curry._1(send, /* ShowOptions */Block.__(1, [$$event.target]));
                        }),
                      onMouseDown: (function () {
                          return Curry._1(send, /* MouseDown */2);
                        }),
                      onTouchStart: (function () {
                          return Curry._1(send, /* MouseDown */2);
                        })
                    }, Curry._1(renderPicker, value)), {
                  "aria-disabled": Js_boolean.to_js_boolean(disabled)
                });
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* layer : None */0,
              /* focus : NotFocused */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              var match = state[/* focus */1];
              if (match !== 1) {
                return /* Update */Block.__(0, [/* record */[
                            /* layer */state[/* layer */0],
                            /* focus : FocusedFromKeyboard */2
                          ]]);
              } else {
                return /* NoUpdate */0;
              }
          case 1 : 
              return /* Update */Block.__(0, [/* record */[
                          /* layer */state[/* layer */0],
                          /* focus : NotFocused */0
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* layer */state[/* layer */0],
                          /* focus : FocusedFromMouse */1
                        ]]);
          case 3 : 
              var match$1 = state[/* layer */0];
              if (match$1) {
                var layer = match$1[0];
                return /* SilentUpdateWithSideEffects */Block.__(4, [
                          /* record */[
                            /* layer : None */0,
                            /* focus */state[/* focus */1]
                          ],
                          (function () {
                              return Curry._1(PickerLayerManager[/* remove */3], layer);
                            })
                        ]);
              } else {
                return /* NoUpdate */0;
              }
          
        }
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var target = action[1];
              var keys = action[0];
              var match$2 = keys[0];
              if (match$2 !== 13) {
                if (match$2 !== 32) {
                  var match$3 = keys[1];
                  if (match$3 !== 13) {
                    if (match$3 !== 32) {
                      return /* NoUpdate */0;
                    } else {
                      return /* SideEffects */Block.__(2, [(function (param) {
                                    return makeLayer(target, param);
                                  })]);
                    }
                  } else {
                    return /* SideEffects */Block.__(2, [(function (param) {
                                  return makeLayer(target, param);
                                })]);
                  }
                } else {
                  return /* SideEffects */Block.__(2, [(function (param) {
                                return makeLayer(target, param);
                              })]);
                }
              } else {
                return /* SideEffects */Block.__(2, [(function (param) {
                              return makeLayer(target, param);
                            })]);
              }
          case 1 : 
              var target$1 = action[0];
              return /* SideEffects */Block.__(2, [(function (param) {
                            return makeLayer(target$1, param);
                          })]);
          case 2 : 
              return /* SilentUpdateWithSideEffects */Block.__(4, [
                        /* record */[
                          /* layer : Some */[action[0]],
                          /* focus */state[/* focus */1]
                        ],
                        whenLayerReady
                      ]);
          case 3 : 
              var match$4 = action[0];
              var target$2 = match$4[1];
              var switcher = match$4[0] - 38 | 0;
              if (switcher > 2 || switcher < 0) {
                return /* NoUpdate */0;
              } else {
                switch (switcher) {
                  case 0 : 
                      var match$5 = target$2.previousElementSibling;
                      if (match$5 == null) {
                        var match$6 = target$2.parentElement;
                        if (match$6 == null) {
                          return /* NoUpdate */0;
                        } else {
                          var match$7 = match$6.lastElementChild;
                          if (match$7 == null) {
                            return /* NoUpdate */0;
                          } else {
                            return /* UpdateWithSideEffects */Block.__(3, [
                                      /* record */[
                                        /* layer */state[/* layer */0],
                                        /* focus : FocusedFromKeyboard */2
                                      ],
                                      (function () {
                                          requestAnimationFrame((function () {
                                                  match$7.focus();
                                                  return /* () */0;
                                                }));
                                          return /* () */0;
                                        })
                                    ]);
                          }
                        }
                      } else {
                        return /* UpdateWithSideEffects */Block.__(3, [
                                  /* record */[
                                    /* layer */state[/* layer */0],
                                    /* focus : FocusedFromKeyboard */2
                                  ],
                                  (function () {
                                      requestAnimationFrame((function () {
                                              match$5.focus();
                                              return /* () */0;
                                            }));
                                      return /* () */0;
                                    })
                                ]);
                      }
                  case 1 : 
                      return /* NoUpdate */0;
                  case 2 : 
                      var match$8 = target$2.nextElementSibling;
                      if (match$8 == null) {
                        var match$9 = target$2.parentElement;
                        if (match$9 == null) {
                          return /* NoUpdate */0;
                        } else {
                          var match$10 = match$9.firstElementChild;
                          if (match$10 == null) {
                            return /* NoUpdate */0;
                          } else {
                            return /* UpdateWithSideEffects */Block.__(3, [
                                      /* record */[
                                        /* layer */state[/* layer */0],
                                        /* focus : FocusedFromKeyboard */2
                                      ],
                                      (function () {
                                          requestAnimationFrame((function () {
                                                  match$10.focus();
                                                  return /* () */0;
                                                }));
                                          return /* () */0;
                                        })
                                    ]);
                          }
                        }
                      } else {
                        return /* UpdateWithSideEffects */Block.__(3, [
                                  /* record */[
                                    /* layer */state[/* layer */0],
                                    /* focus : FocusedFromKeyboard */2
                                  ],
                                  (function () {
                                      requestAnimationFrame((function () {
                                              match$8.focus();
                                              return /* () */0;
                                            }));
                                      return /* () */0;
                                    })
                                ]);
                      }
                  
                }
              }
          
        }
      }
    });
  return newrecord;
}

exports.component = component;
exports.PickerLayerManager = PickerLayerManager;
exports.renderOptionWithEvent = renderOptionWithEvent;
exports.makeLayer = makeLayer;
exports.make = make;
/* component Not a pure module */
