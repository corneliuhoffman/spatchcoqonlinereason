// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var TouchableOpacity = require("./touchableOpacity.js");

var component = ReasonReact.reducerComponent("TabbedView");

function setTabContainerRef(tabContainerRef, param) {
  param[/* state */2][/* tabContainerRef */2][0] = (tabContainerRef == null) ? /* None */0 : [tabContainerRef];
  return /* () */0;
}

function setRect(state) {
  var match = state[/* tabContainerRef */2];
  var match$1 = match[/* contents */0];
  if (match$1) {
    var containerRef = match$1[0];
    var children = containerRef.children;
    var item = children.item(state[/* openTab */0]);
    if (item == null) {
      return /* NoUpdate */0;
    } else {
      var parentRect = containerRef.getBoundingClientRect();
      var childRect = item.getBoundingClientRect();
      return /* Update */Block.__(0, [/* record */[
                  /* openTab */state[/* openTab */0],
                  /* activeTabHandleRect : Some */[/* tuple */[
                      childRect.left - parentRect.left | 0,
                      childRect.top - parentRect.top | 0,
                      childRect.width,
                      childRect.height
                    ]],
                  /* tabContainerRef */state[/* tabContainerRef */2]
                ]]);
    }
  } else {
    return /* NoUpdate */0;
  }
}

function measureRectAtNextFrame(param) {
  var send = param[/* send */4];
  requestAnimationFrame((function () {
          return Curry._1(send, /* MeasureRect */0);
        }));
  return /* () */0;
}

function make($staropt$star, $staropt$star$1, tabs, $staropt$star$2, $staropt$star$3, _) {
  var initiallyOpenTab = $staropt$star ? $staropt$star[0] : 0;
  var mode = $staropt$star$1 ? $staropt$star$1[0] : /* Vertical */1;
  var color = $staropt$star$2 ? $staropt$star$2[0] : "#4A90E2";
  var tabHeadingPadding = $staropt$star$3 ? $staropt$star$3[0] : "15px 20px";
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function () {
      return /* SideEffects */Block.__(2, [measureRectAtNextFrame]);
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      var match = state[/* activeTabHandleRect */1];
      var tmp;
      if (mode !== 0) {
        if (match) {
          var match$1 = match[0];
          tmp = React.createElement("div", {
                style: {
                  backgroundColor: color,
                  bottom: "-1px",
                  height: "2px",
                  left: String(match$1[0]) + "px",
                  position: "absolute",
                  width: String(match$1[2]) + "px",
                  transition: "200ms ease-out all"
                }
              });
        } else {
          tmp = null;
        }
      } else if (match) {
        var match$2 = match[0];
        tmp = React.createElement("div", {
              style: {
                backgroundColor: color,
                height: String(match$2[3]) + "px",
                position: "absolute",
                right: "-1px",
                top: String(match$2[1]) + "px",
                width: "2px",
                transition: "200ms ease-out all"
              }
            });
      } else {
        tmp = null;
      }
      var match$3 = Caml_array.caml_array_get(tabs, state[/* openTab */0]);
      return React.createElement("div", {
                  style: {
                    display: "flex",
                    flexDirection: mode !== 0 ? "column" : "row",
                    flexGrow: "1"
                  }
                }, React.createElement("div", {
                      style: {
                        display: "flex",
                        position: "relative",
                        flexGrow: "0",
                        flexShrink: "0"
                      }
                    }, React.createElement("div", {
                          ref: Curry._1(param[/* handle */0], setTabContainerRef),
                          style: {
                            display: "flex",
                            boxShadow: mode !== 0 ? "0 1px rgba(0, 0, 0, 0.1)" : "1px 0 rgba(0, 0, 0, 0.1)",
                            flexDirection: mode !== 0 ? "row" : "column",
                            flexGrow: "1",
                            justifyContent: mode !== 0 ? "center" : ""
                          }
                        }, $$Array.mapi((function (index, param) {
                                var match = +(index === state[/* openTab */0]);
                                return ReasonReact.element(/* Some */[String(index)], /* None */0, TouchableOpacity.make((function () {
                                                  return Curry._1(send, /* SetActiveTab */[index]);
                                                }), /* Some */[{
                                                  color: match !== 0 ? color : "rgba(0, 0, 0, 0.6)",
                                                  padding: tabHeadingPadding
                                                }], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[param[0]]));
                              }), tabs)), tmp), React.createElement("div", {
                      style: {
                        display: "flex",
                        flexDirection: "column",
                        flexGrow: "1"
                      }
                    }, Curry._1(match$3[1], /* () */0)));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* openTab */initiallyOpenTab,
              /* activeTabHandleRect : None */0,
              /* tabContainerRef */[/* None */0]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        return /* UpdateWithSideEffects */Block.__(3, [
                  /* record */[
                    /* openTab */action[0],
                    /* activeTabHandleRect */state[/* activeTabHandleRect */1],
                    /* tabContainerRef */state[/* tabContainerRef */2]
                  ],
                  measureRectAtNextFrame
                ]);
      } else {
        return setRect(state);
      }
    });
  return newrecord;
}

exports.component = component;
exports.setTabContainerRef = setTabContainerRef;
exports.setRect = setRect;
exports.measureRectAtNextFrame = measureRectAtNextFrame;
exports.make = make;
/* component Not a pure module */
