// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var ReactDom = require("react-dom");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var LayerMap = $$Map.Make([$$String.compare]);

var currentLayer = [0];

var map = [LayerMap[/* empty */0]];

var activeElement = [/* None */0];

function make(behavior) {
  var root = document.createElement("div");
  root.setAttribute("role", "dialog");
  root.setAttribute("tabindex", "0");
  activeElement[0] = Js_primitive.null_to_opt(document.activeElement);
  var style = root.style;
  style.setProperty("outline", "none", "");
  if (typeof behavior === "number") {
    if (behavior !== 0) {
      style.setProperty("position", "fixed", "");
      style.setProperty("z-index", "2147483647", "");
      style.setProperty("left", "0", "");
      style.setProperty("top", "0", "");
    } else {
      style.setProperty("position", "absolute", "");
      style.setProperty("z-index", "2147483647", "");
      style.setProperty("left", String(window.pageXOffset) + "px", "");
      style.setProperty("top", String(window.pageYOffset) + "px", "");
    }
  } else {
    var pageXOffset = window.pageXOffset;
    var pageYOffset = window.pageYOffset;
    var innerWidth = window.innerWidth;
    var innerHeight = window.innerHeight;
    var boundaries = behavior[0].getBoundingClientRect();
    style.setProperty("position", "absolute", "");
    style.setProperty("z-index", "2147483647", "");
    switch (behavior[1]) {
      case 0 : 
          style.setProperty("bottom", String((innerHeight + pageYOffset | 0) - boundaries.top | 0) + "px", "");
          style.setProperty("left", String(pageXOffset + boundaries.left | 0) + "px", "");
          break;
      case 1 : 
          style.setProperty("bottom", String((innerHeight + pageYOffset | 0) - boundaries.top | 0) + "px", "");
          style.setProperty("right", String((innerWidth + pageXOffset | 0) - boundaries.right | 0) + "px", "");
          break;
      case 2 : 
          style.setProperty("top", String(pageYOffset + boundaries.bottom | 0) + "px", "");
          style.setProperty("left", String(pageXOffset + boundaries.left | 0) + "px", "");
          break;
      case 3 : 
          style.setProperty("top", String(pageYOffset + boundaries.bottom | 0) + "px", "");
          style.setProperty("right", String((innerWidth + pageXOffset | 0) - boundaries.right | 0) + "px", "");
          break;
      case 4 : 
          style.setProperty("top", String(pageYOffset + boundaries.top | 0) + "px", "");
          style.setProperty("right", String((innerWidth + pageXOffset | 0) - boundaries.left | 0) + "px", "");
          style.setProperty("height", String(boundaries.height) + "px", "");
          break;
      case 5 : 
          style.setProperty("top", String(pageYOffset + boundaries.top | 0) + "px", "");
          style.setProperty("left", String(pageXOffset + boundaries.right | 0) + "px", "");
          style.setProperty("height", String(boundaries.height) + "px", "");
          break;
      case 6 : 
          style.setProperty("bottom", String((innerHeight + pageYOffset | 0) - boundaries.top | 0) + "px", "");
          style.setProperty("left", String(pageXOffset + boundaries.left | 0) + "px", "");
          style.setProperty("min-width", String(boundaries.width) + "px", "");
          break;
      case 7 : 
          style.setProperty("top", String(pageYOffset + boundaries.bottom | 0) + "px", "");
          style.setProperty("left", String(pageXOffset + boundaries.left | 0) + "px", "");
          style.setProperty("min-width", String(boundaries.width) + "px", "");
          break;
      
    }
  }
  var body = document.querySelector("body");
  if (!(body == null)) {
    body.appendChild(root);
  }
  var layer = currentLayer[0] + 1 | 0;
  currentLayer[0] = layer;
  map[0] = Curry._3(LayerMap[/* add */3], String(currentLayer[0]), root, map[0]);
  return Promise.resolve(String(layer)).then((function (layer) {
                root.focus();
                return Promise.resolve(layer);
              }));
}

function get(layer) {
  try {
    var layerNode = Curry._2(LayerMap[/* find */21], layer, map[0]);
    return /* Some */[layerNode];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function render(layer, element) {
  try {
    var layerNode = Curry._2(LayerMap[/* find */21], layer, map[0]);
    ReactDom.render(element, layerNode);
    return /* () */0;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* () */0;
    } else {
      throw exn;
    }
  }
}

function remove(layer) {
  try {
    var layerNode = Curry._2(LayerMap[/* find */21], layer, map[0]);
    ReactDom.unmountComponentAtNode(layerNode);
    layerNode.remove();
    map[0] = Curry._2(LayerMap[/* remove */5], layer, map[0]);
    var match = activeElement[0];
    if (match) {
      match[0].focus();
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* () */0;
    } else {
      throw exn;
    }
  }
}

function removeNode(layer) {
  try {
    var layerNode = Curry._2(LayerMap[/* find */21], layer, map[0]);
    layerNode.remove();
    map[0] = Curry._2(LayerMap[/* remove */5], layer, map[0]);
    var match = activeElement[0];
    if (match) {
      match[0].focus();
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* () */0;
    } else {
      throw exn;
    }
  }
}

var DefaultImpl = /* module */[
  /* LayerMap */LayerMap,
  /* currentLayer */currentLayer,
  /* map */map,
  /* activeElement */activeElement,
  /* make */make,
  /* get */get,
  /* render */render,
  /* remove */remove,
  /* removeNode */removeNode
];

function Make(Impl) {
  var make = function (behavior) {
    return Curry._1(Impl[/* make */0], behavior);
  };
  var render = function (layer, element) {
    return Curry._2(Impl[/* render */2], layer, element);
  };
  var get = function (layer) {
    return Curry._1(Impl[/* get */1], layer);
  };
  var remove = function (layer) {
    return Curry._1(Impl[/* remove */3], layer);
  };
  var removeNode = function (layer) {
    return Curry._1(Impl[/* removeNode */4], layer);
  };
  return /* module */[
          /* make */make,
          /* render */render,
          /* get */get,
          /* remove */remove,
          /* removeNode */removeNode
        ];
}

exports.DefaultImpl = DefaultImpl;
exports.Make = Make;
/* LayerMap Not a pure module */
