// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var LayerManager = require("./layerManager.js");

var component = ReasonReact.reducerComponent("Tooltip");

var TooltipLayerManager = LayerManager.Make([
      LayerManager.DefaultImpl[4],
      LayerManager.DefaultImpl[5],
      LayerManager.DefaultImpl[6],
      LayerManager.DefaultImpl[7],
      LayerManager.DefaultImpl[8]
    ]);

function getArrowStyle(alignTo) {
  var exit = 0;
  switch (alignTo) {
    case 1 : 
        return {
                border: "5px solid transparent",
                borderTopColor: "#000",
                borderBottomWidth: "0",
                height: "0",
                position: "absolute",
                right: "5px",
                top: "100%",
                width: "0"
              };
    case 3 : 
        return {
                border: "5px solid transparent",
                borderBottomColor: "#000",
                borderTopWidth: "0",
                bottom: "100%",
                height: "0",
                position: "absolute",
                right: "5px",
                width: "0"
              };
    case 4 : 
        return {
                border: "5px solid transparent",
                borderLeftColor: "#000",
                borderRightWidth: "0",
                height: "0",
                left: "100%",
                position: "absolute",
                top: "5px",
                width: "0"
              };
    case 5 : 
        return {
                border: "5px solid transparent",
                borderRightColor: "#000",
                borderLeftWidth: "0",
                height: "0",
                position: "absolute",
                right: "100%",
                top: "5px",
                width: "0"
              };
    case 0 : 
    case 6 : 
        exit = 1;
        break;
    case 2 : 
    case 7 : 
        exit = 2;
        break;
    
  }
  switch (exit) {
    case 1 : 
        return {
                border: "5px solid transparent",
                borderTopColor: "#000",
                borderBottomWidth: "0",
                height: "0",
                left: "5px",
                position: "absolute",
                top: "100%",
                width: "0"
              };
    case 2 : 
        return {
                border: "5px solid transparent",
                borderBottomColor: "#000",
                borderTopWidth: "0",
                bottom: "100%",
                height: "0",
                left: "5px",
                position: "absolute",
                width: "0"
              };
    
  }
}

function renderLayer(message, alignTo, param) {
  var state = param[/* state */2];
  if (state) {
    return Curry._2(TooltipLayerManager[/* render */1], state[0], React.createElement("div", {
                    style: {
                      backgroundColor: "#000",
                      color: "#fff",
                      fontSize: "12px",
                      margin: alignTo === 5 || alignTo === 4 ? "0 10px" : "10px 0",
                      padding: "10px",
                      position: "relative",
                      borderRadius: "2px"
                    }
                  }, React.createElement("div", {
                        style: getArrowStyle(alignTo)
                      }), React.createElement("div", {
                        style: {
                          whiteSpace: "pre-line"
                        }
                      }, message)));
  } else {
    return /* () */0;
  }
}

function make(style, message, alignTo, children) {
  var showTooltip = function ($$event, self) {
    var layer = Curry._1(TooltipLayerManager[/* make */0], /* Contextualized */[
          $$event.target,
          alignTo
        ]);
    layer.then((function (layer) {
            Curry._1(self[/* send */4], /* SetLayer */[layer]);
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  var hideTooltip = function (_, param) {
    var state = param[/* state */2];
    if (state) {
      Curry._1(TooltipLayerManager[/* remove */3], state[0]);
      return Curry._1(param[/* send */4], /* RemoveLayer */0);
    } else {
      return /* () */0;
    }
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var handle = param[/* handle */0];
      var tmp = {
        onMouseEnter: Curry._1(handle, showTooltip),
        onMouseLeave: Curry._1(handle, hideTooltip)
      };
      if (style) {
        tmp.style = style[0];
      }
      return React.createElement("div", tmp, Caml_array.caml_array_get(children, 0));
    });
  newrecord[/* initialState */10] = (function () {
      return /* None */0;
    });
  newrecord[/* reducer */12] = (function (action, _) {
      if (action) {
        return /* SilentUpdateWithSideEffects */Block.__(4, [
                  /* Some */[action[0]],
                  (function (param) {
                      return renderLayer(message, alignTo, param);
                    })
                ]);
      } else {
        return /* SilentUpdate */Block.__(1, [/* None */0]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.TooltipLayerManager = TooltipLayerManager;
exports.getArrowStyle = getArrowStyle;
exports.renderLayer = renderLayer;
exports.make = make;
/* component Not a pure module */
