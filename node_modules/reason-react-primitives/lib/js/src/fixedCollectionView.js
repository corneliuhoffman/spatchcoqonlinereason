// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

function Make(FixedCollectionViewRow) {
  var component = ReasonReact.reducerComponent("FixedCollectionView[" + (FixedCollectionViewRow[/* name */0] + "]"));
  var setContainerRef = function (containerRef, param) {
    param[/* state */2][/* containerRef */2][0] = (containerRef == null) ? /* None */0 : [containerRef];
    return /* () */0;
  };
  var make = function (data, onEndReached, scrollOffset, rowHeight, headerHeight, $staropt$star, $staropt$star$1, renderFooter, $staropt$star$2, columns, _) {
    var headerRowStyle = $staropt$star ? $staropt$star[0] : { };
    var userRenderRow = $staropt$star$1 ? $staropt$star$1[0] : (function (_, item) {
          return React.createElement("div", {
                      style: {
                        display: "flex",
                        alignItems: "center",
                        flexDirection: "row"
                      }
                    }, item);
        });
    var footerHeight = $staropt$star$2 ? $staropt$star$2[0] : 0;
    var measureContainerAtNextFrame = function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      requestAnimationFrame((function () {
              var match = state[/* containerRef */2];
              var match$1 = match[/* contents */0];
              if (match$1) {
                return Curry._1(send, /* SetContainerHeight */Block.__(0, [match$1[0].clientHeight - headerHeight | 0]));
              } else {
                return /* () */0;
              }
            }));
      return /* () */0;
    };
    var newrecord = component.slice();
    newrecord[/* didMount */4] = (function (param) {
        Curry._1(param[/* send */4], /* MeasureContainerAtNextFrame */0);
        return /* NoUpdate */0;
      });
    newrecord[/* render */9] = (function (param) {
        var send = param[/* send */4];
        var state = param[/* state */2];
        var match = state[/* containerHeight */0];
        var match$1 = state[/* containerHeight */0];
        var tmp;
        if (match$1) {
          var startIndex = Caml_primitive.caml_int_max(Caml_int32.div(state[/* scrollTop */1] - scrollOffset | 0, rowHeight), 0);
          var renderableCount = Caml_primitive.caml_int_min(Caml_int32.div(match$1[0] + (scrollOffset << 1) | 0, rowHeight), data.length);
          tmp = React.createElement("div", {
                style: {
                  height: String(Caml_int32.imul(data.length, rowHeight) + footerHeight | 0) + "px",
                  position: "relative"
                }
              }, $$Array.mapi((function (param, param$1) {
                      var startIndex$1 = startIndex;
                      var rowIndex = param;
                      var rowData = param$1;
                      return React.createElement("div", {
                                  key: String(rowIndex + startIndex$1 | 0),
                                  style: {
                                    display: "flex",
                                    height: String(rowHeight) + "px",
                                    left: "0px",
                                    position: "absolute",
                                    right: "0px",
                                    top: String(Caml_int32.imul(rowIndex + startIndex$1 | 0, rowHeight)) + "px",
                                    boxShadow: "0 1px rgba(0, 0, 0, 0.1)",
                                    alignItems: "stretch",
                                    flexDirection: "column",
                                    justifyContent: "center"
                                  }
                                }, Curry._2(userRenderRow, rowData, $$Array.of_list(List.mapi((function (index, column) {
                                                var tmp = {
                                                  key: String(index)
                                                };
                                                var tmp$1 = column[/* style */1];
                                                if (tmp$1) {
                                                  tmp.style = tmp$1[0];
                                                }
                                                return React.createElement("div", tmp, Curry._2(column[/* renderCell */3], startIndex$1 + rowIndex | 0, rowData));
                                              }), columns))));
                    }), $$Array.sub(data, startIndex, Caml_primitive.caml_int_min(renderableCount + 1 | 0, data.length - startIndex | 0))), renderFooter ? React.createElement("div", {
                      style: {
                        bottom: "0",
                        display: "flex",
                        height: String(footerHeight) + "px",
                        left: "0",
                        position: "absolute",
                        right: "0",
                        alignItems: "center",
                        flexDirection: "row",
                        justifyContent: "center"
                      }
                    }, Curry._1(renderFooter[0], /* () */0)) : null);
        } else {
          tmp = null;
        }
        return React.createElement("div", {
                    ref: Curry._1(param[/* handle */0], setContainerRef),
                    style: {
                      width: "100%",
                      flexGrow: "1"
                    }
                  }, React.createElement("div", {
                        style: ReactDOMRe.Style[/* combine */0](headerRowStyle, {
                              display: "flex",
                              height: String(headerHeight) + "px",
                              alignItems: "center",
                              flexDirection: "row"
                            })
                      }, $$Array.of_list(List.mapi((function (index, column) {
                                  var tmp = {
                                    key: String(index)
                                  };
                                  var tmp$1 = column[/* style */1];
                                  if (tmp$1) {
                                    tmp.style = tmp$1[0];
                                  }
                                  return React.createElement("div", tmp, Curry._1(column[/* renderHeader */2], column));
                                }), columns))), React.createElement("div", {
                        className: "rrp-FixedCollectionViewScrollView",
                        style: {
                          height: match ? String(match[0]) + "px" : "auto",
                          overflow: "auto",
                          width: "100%",
                          flexGrow: "1"
                        },
                        onScroll: (function ($$event) {
                            return Curry._1(send, /* SetScrollTop */Block.__(1, [/* tuple */[
                                            $$event.target.scrollTop,
                                            $$event.target.clientHeight
                                          ]]));
                          })
                      }, tmp));
      });
    newrecord[/* initialState */10] = (function () {
        return /* record */[
                /* containerHeight : None */0,
                /* scrollTop */0,
                /* containerRef */[/* None */0]
              ];
      });
    newrecord[/* reducer */12] = (function (action, state) {
        if (typeof action === "number") {
          return /* SideEffects */Block.__(2, [measureContainerAtNextFrame]);
        } else if (action.tag) {
          var match = action[0];
          var param = /* tuple */[
            match[0],
            match[1]
          ];
          var state$1 = state;
          var scrollTop = param[0];
          if (onEndReached) {
            if ((Caml_int32.imul(data.length, rowHeight) - (scrollTop + param[1] | 0) | 0) <= scrollOffset) {
              Curry._1(onEndReached[0], /* () */0);
            }
            
          }
          return /* Update */Block.__(0, [/* record */[
                      /* containerHeight */state$1[/* containerHeight */0],
                      /* scrollTop */scrollTop,
                      /* containerRef */state$1[/* containerRef */2]
                    ]]);
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* containerHeight : Some */[action[0]],
                      /* scrollTop */state[/* scrollTop */1],
                      /* containerRef */state[/* containerRef */2]
                    ]]);
        }
      });
    return newrecord;
  };
  return /* module */[
          /* component */component,
          /* setContainerRef */setContainerRef,
          /* make */make
        ];
}

exports.Make = Make;
/* react Not a pure module */
