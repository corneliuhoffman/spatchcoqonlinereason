// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var ActivityIndicator = require("./activityIndicator.js");

var component = ReasonReact.reducerComponent("Switch");

function make(value, onValueChange, $staropt$star, _) {
  var disabled = $staropt$star ? $staropt$star[0] : /* false */0;
  var handleChange = function () {
    return Curry._1(onValueChange, 1 - value[1]);
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      return React.cloneElement(React.createElement("div", {
                      role: "checkbox",
                      style: ReactDOMRe.Style[/* unsafeAddProp */1]({
                            backgroundColor: value[0] !== 0 ? (
                                value[1] !== 0 ? "rgba(74, 144, 226, 0.5)" : "rgba(0, 0, 0, 0.1)"
                              ) : (
                                value[1] !== 0 ? "rgba(74, 144, 226, 1)" : "rgba(0, 0, 0, 0.2)"
                              ),
                            cursor: disabled !== 0 ? "default" : "pointer",
                            height: "14px",
                            outline: param[/* state */2] !== 1 ? "" : "none",
                            position: "relative",
                            width: "35px",
                            opacity: disabled !== 0 ? ".4" : "1",
                            borderRadius: "7px",
                            boxShadow: "inset 0 0 0 1px rgba(0, 0, 0, 0.1)"
                          }, "WebkitTapHighlightColor", "rgba(0, 0, 0, 0)"),
                      tabIndex: 0,
                      onKeyPress: (function ($$event) {
                          if (disabled) {
                            return 0;
                          } else {
                            return Curry._1(send, /* KeyPress */[/* tuple */[
                                          $$event.keyCode,
                                          $$event.charCode
                                        ]]);
                          }
                        }),
                      onFocus: (function () {
                          return Curry._1(send, /* Focus */0);
                        }),
                      onBlur: (function () {
                          return Curry._1(send, /* Blur */1);
                        }),
                      onClick: (function () {
                          if (disabled) {
                            return 0;
                          } else {
                            return handleChange(/* () */0);
                          }
                        }),
                      onMouseDown: (function () {
                          return Curry._1(send, /* MouseDown */2);
                        })
                    }, React.createElement("div", {
                          style: {
                            backgroundColor: "#fff",
                            display: "flex",
                            height: "20px",
                            left: value[1] !== 0 ? "20px" : "-5px",
                            position: "absolute",
                            top: "-3px",
                            width: "20px",
                            borderRadius: "10px",
                            boxShadow: "0 0 0 1px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.1)",
                            alignItems: "center",
                            flexDirection: "row",
                            justifyContent: "center",
                            transition: "200ms left ease-in-out"
                          }
                        }, value[0] !== 0 ? ReasonReact.element(/* None */0, /* None */0, ActivityIndicator.make(14.0, /* tuple */[
                                    200,
                                    200,
                                    200
                                  ], /* array */[])) : null)), {
                  "aria-checked": value[0] !== 0 ? "mixed" : (
                      value[1] !== 0 ? "true" : "false"
                    )
                });
    });
  newrecord[/* initialState */10] = (function () {
      return /* NotFocused */0;
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              if (state !== 1) {
                return /* Update */Block.__(0, [/* FocusedFromKeyboard */2]);
              } else {
                return /* NoUpdate */0;
              }
          case 1 : 
              return /* Update */Block.__(0, [/* NotFocused */0]);
          case 2 : 
              return /* Update */Block.__(0, [/* FocusedFromMouse */1]);
          
        }
      } else {
        var keys = action[0];
        var exit = 0;
        var match = keys[0];
        if (match !== 13 && match !== 32) {
          var match$1 = keys[1];
          if (match$1 !== 13 && match$1 !== 32) {
            return /* NoUpdate */0;
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          return /* SideEffects */Block.__(2, [(function () {
                        return handleChange(/* () */0);
                      })]);
        }
        
      }
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
