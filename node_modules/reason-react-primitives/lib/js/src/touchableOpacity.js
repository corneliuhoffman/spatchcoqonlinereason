// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("TouchableOpacity");

function make(onPress, style, focusedFromKeyboardStyle, focusedFromMouseStyle, $staropt$star, disabledStyle, onKeyPress, onKeyDown, onKeyUp, onFocus, onBlur, children) {
  var disabled = $staropt$star ? $staropt$star[0] : /* false */0;
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      var match = state[/* pressed */0];
      var opacityStyle = {
        cursor: "pointer",
        opacity: match !== 0 ? "1" : "0.5",
        transition: "100ms linear opacity",
        transform: "translateZ(0)"
      };
      var match$1 = state[/* focus */1];
      var match$2 = state[/* focus */1];
      var tmp;
      var exit = 0;
      switch (match$2) {
        case 0 : 
            exit = 1;
            break;
        case 1 : 
            if (focusedFromMouseStyle) {
              tmp = focusedFromMouseStyle[0];
            } else {
              exit = 1;
            }
            break;
        case 2 : 
            if (focusedFromKeyboardStyle) {
              tmp = focusedFromKeyboardStyle[0];
            } else {
              exit = 1;
            }
            break;
        
      }
      if (exit === 1) {
        tmp = { };
      }
      var tmp$1;
      var exit$1 = 0;
      if (disabled !== 0 && disabledStyle) {
        tmp$1 = disabledStyle[0];
      } else {
        exit$1 = 1;
      }
      if (exit$1 === 1) {
        tmp$1 = { };
      }
      return React.cloneElement(React.createElement("div", {
                      role: "button",
                      style: ReactDOMRe.Style[/* combine */0](ReactDOMRe.Style[/* combine */0](ReactDOMRe.Style[/* unsafeAddProp */1](ReactDOMRe.Style[/* combine */0]({
                                        outline: match$1 !== 1 ? "" : "none"
                                      }, style ? ReactDOMRe.Style[/* combine */0](opacityStyle, style[0]) : opacityStyle), "WebkitTapHighlightColor", "rgba(0, 0, 0, 0)"), tmp), tmp$1),
                      tabIndex: 0,
                      onKeyDown: (function ($$event) {
                          if (onKeyDown) {
                            Curry._1(onKeyDown[0], $$event);
                          }
                          return Curry._1(send, /* KeyDown */Block.__(0, [$$event.keyCode]));
                        }),
                      onKeyPress: (function ($$event) {
                          if (onKeyPress) {
                            Curry._1(onKeyPress[0], $$event);
                          }
                          var keys_000 = $$event.keyCode;
                          var keys_001 = $$event.charCode;
                          var keys = /* tuple */[
                            keys_000,
                            keys_001
                          ];
                          var match = keys_000;
                          if (match !== 13 && match !== 32) {
                            var match$1 = keys_001;
                            if (match$1 !== 13) {
                              if (match$1 !== 32) {
                                
                              } else {
                                $$event.preventDefault();
                              }
                            } else {
                              $$event.preventDefault();
                            }
                          } else {
                            $$event.preventDefault();
                          }
                          return Curry._1(send, /* KeyPress */Block.__(2, [keys]));
                        }),
                      onKeyUp: (function ($$event) {
                          if (onKeyUp) {
                            Curry._1(onKeyUp[0], $$event);
                          }
                          return Curry._1(send, /* KeyUp */Block.__(1, [$$event.keyCode]));
                        }),
                      onFocus: (function ($$event) {
                          if (onFocus) {
                            Curry._1(onFocus[0], $$event);
                          }
                          return Curry._1(send, /* Focus */0);
                        }),
                      onBlur: (function ($$event) {
                          if (onBlur) {
                            Curry._1(onBlur[0], $$event);
                          }
                          return Curry._1(send, /* Blur */1);
                        }),
                      onClick: (function () {
                          return Curry._1(send, /* Click */4);
                        }),
                      onMouseDown: (function () {
                          return Curry._1(send, /* MouseDown */2);
                        }),
                      onMouseUp: (function () {
                          return Curry._1(send, /* MouseUp */3);
                        }),
                      onTouchEnd: (function () {
                          return Curry._1(send, /* MouseUp */3);
                        }),
                      onTouchStart: (function () {
                          return Curry._1(send, /* MouseDown */2);
                        })
                    }, Caml_array.caml_array_get(children, 0)), {
                  "aria-disabled": Js_boolean.to_js_boolean(disabled)
                });
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* pressed : Idle */1,
              /* focus : NotFocused */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                var match = state[/* focus */1];
                if (match !== 1) {
                  return /* Update */Block.__(0, [/* record */[
                              /* pressed */state[/* pressed */0],
                              /* focus : FocusedFromKeyboard */2
                            ]]);
                } else {
                  return /* NoUpdate */0;
                }
              }
          case 1 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* pressed */state[/* pressed */0],
                            /* focus : NotFocused */0
                          ]]);
              }
          case 2 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* pressed : Depressed */0,
                            /* focus : FocusedFromMouse */1
                          ]]);
              }
          case 3 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* pressed : Idle */1,
                            /* focus */state[/* focus */1]
                          ]]);
              }
          case 4 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                return /* SideEffects */Block.__(2, [(function () {
                              Curry._1(onPress, /* () */0);
                              return /* () */0;
                            })]);
              }
          
        }
      } else {
        switch (action.tag | 0) {
          case 0 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                var key = action[0];
                if (key !== 13) {
                  if (key !== 32) {
                    return /* NoUpdate */0;
                  } else {
                    return /* Update */Block.__(0, [/* record */[
                                /* pressed : Depressed */0,
                                /* focus */state[/* focus */1]
                              ]]);
                  }
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* pressed : Depressed */0,
                              /* focus */state[/* focus */1]
                            ]]);
                }
              }
          case 1 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                var key$1 = action[0];
                if (key$1 !== 13) {
                  if (key$1 !== 32) {
                    return /* NoUpdate */0;
                  } else {
                    return /* Update */Block.__(0, [/* record */[
                                /* pressed : Idle */1,
                                /* focus */state[/* focus */1]
                              ]]);
                  }
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* pressed : Idle */1,
                              /* focus */state[/* focus */1]
                            ]]);
                }
              }
          case 2 : 
              if (disabled !== 0) {
                return /* NoUpdate */0;
              } else {
                var keys = action[0];
                var match$1 = keys[0];
                if (match$1 !== 13) {
                  if (match$1 !== 32) {
                    var match$2 = keys[1];
                    if (match$2 !== 13 && match$2 !== 32) {
                      return /* NoUpdate */0;
                    } else {
                      Curry._1(onPress, /* () */0);
                      return /* NoUpdate */0;
                    }
                  } else {
                    Curry._1(onPress, /* () */0);
                    return /* NoUpdate */0;
                  }
                } else {
                  Curry._1(onPress, /* () */0);
                  return /* NoUpdate */0;
                }
              }
          
        }
      }
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
